import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-GERMHXHB.js";

// node_modules/lodash/noop.js
var require_noop = __commonJS({
  "node_modules/lodash/noop.js"(exports, module) {
    function noop() {
    }
    module.exports = noop;
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      return module.exports = _typeof2 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof2(obj);
    }
    module.exports = _typeof2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorRuntime.js
var require_regeneratorRuntime = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(exports, module) {
    var _typeof2 = require_typeof()["default"];
    function _regeneratorRuntime7() {
      "use strict";
      module.exports = _regeneratorRuntime7 = function _regeneratorRuntime8() {
        return exports2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var exports2 = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function(obj, key, desc) {
        obj[key] = desc.value;
      }, $Symbol = typeof Symbol == "function" ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        }), obj[key];
      }
      try {
        define({}, "");
      } catch (err) {
        define = function define2(obj, key, value) {
          return obj[key] = value;
        };
      }
      function wrap(innerFn, outerFn, self2, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []);
        return defineProperty(generator, "_invoke", {
          value: makeInvokeMethod(innerFn, self2, context)
        }), generator;
      }
      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }
      exports2.wrap = wrap;
      var ContinueSentinel = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function() {
        return this;
      });
      var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }
      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type !== "throw") {
            var result = record.arg, value = result.value;
            return value && _typeof2(value) == "object" && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
              invoke("next", value2, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function(unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function(error) {
              return invoke("throw", error, resolve, reject);
            });
          }
          reject(record.arg);
        }
        var previousPromise;
        defineProperty(this, "_invoke", {
          value: function value(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function(resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(innerFn, self2, context) {
        var state = "suspendedStart";
        return function(method, arg) {
          if (state === "executing")
            throw new Error("Generator is already running");
          if (state === "completed") {
            if (method === "throw")
              throw arg;
            return doneResult();
          }
          for (context.method = method, context.arg = arg; ; ) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel)
                  continue;
                return delegateResult;
              }
            }
            if (context.method === "next")
              context.sent = context._sent = context.arg;
            else if (context.method === "throw") {
              if (state === "suspendedStart")
                throw state = "completed", context.arg;
              context.dispatchException(context.arg);
            } else
              context.method === "return" && context.abrupt("return", context.arg);
            state = "executing";
            var record = tryCatch(innerFn, self2, context);
            if (record.type === "normal") {
              if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
                continue;
              return {
                value: record.arg,
                done: context.done
              };
            }
            record.type === "throw" && (state = "completed", context.method = "throw", context.arg = record.arg);
          }
        };
      }
      function maybeInvokeDelegate(delegate, context) {
        var methodName = context.method, method = delegate.iterator[methodName];
        if (method === void 0)
          return context.delegate = null, methodName === "throw" && delegate.iterator["return"] && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), context.method === "throw") || methodName !== "return" && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw")
          return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, context.method !== "return" && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }
      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }
      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
      }
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod)
            return iteratorMethod.call(iterable);
          if (typeof iterable.next == "function")
            return iterable;
          if (!isNaN(iterable.length)) {
            var i2 = -1, next = function next2() {
              for (; ++i2 < iterable.length; ) {
                if (hasOwn.call(iterable, i2))
                  return next2.value = iterable[i2], next2.done = false, next2;
              }
              return next2.value = void 0, next2.done = true, next2;
            };
            return next.next = next;
          }
        }
        return {
          next: doneResult
        };
      }
      function doneResult() {
        return {
          value: void 0,
          done: true
        };
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
      }), defineProperty(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
      }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports2.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun == "function" && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction");
      }, exports2.mark = function(genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports2.awrap = function(arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
      }), exports2.AsyncIterator = AsyncIterator, exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
        PromiseImpl === void 0 && (PromiseImpl = Promise);
        var iter2 = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
        return exports2.isGeneratorFunction(outerFn) ? iter2 : iter2.next().then(function(result) {
          return result.done ? result.value : iter2.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
        return this;
      }), define(Gp, "toString", function() {
        return "[object Generator]";
      }), exports2.keys = function(val) {
        var object = Object(val), keys = [];
        for (var key in object) {
          keys.push(key);
        }
        return keys.reverse(), function next() {
          for (; keys.length; ) {
            var key2 = keys.pop();
            if (key2 in object)
              return next.value = key2, next.done = false, next;
          }
          return next.done = true, next;
        };
      }, exports2.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
            for (var name2 in this) {
              name2.charAt(0) === "t" && hasOwn.call(this, name2) && !isNaN(+name2.slice(1)) && (this[name2] = void 0);
            }
        },
        stop: function stop() {
          this.done = true;
          var rootRecord = this.tryEntries[0].completion;
          if (rootRecord.type === "throw")
            throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done)
            throw exception;
          var context = this;
          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
          }
          for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
            var entry = this.tryEntries[i2], record = entry.completion;
            if (entry.tryLoc === "root")
              return handle("end");
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc)
                  return handle(entry.catchLoc, true);
                if (this.prev < entry.finallyLoc)
                  return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc)
                  return handle(entry.catchLoc, true);
              } else {
                if (!hasFinally)
                  throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc)
                  return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
            var entry = this.tryEntries[i2];
            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
          finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw")
            throw record.arg;
          return record.type === "break" || record.type === "continue" ? this.next = record.arg : record.type === "return" ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : record.type === "normal" && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
            var entry = this.tryEntries[i2];
            if (entry.finallyLoc === finallyLoc)
              return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
            var entry = this.tryEntries[i2];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName,
            nextLoc
          }, this.method === "next" && (this.arg = void 0), ContinueSentinel;
        }
      }, exports2;
    }
    module.exports = _regeneratorRuntime7, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime/regenerator/index.js"(exports, module) {
    var runtime = require_regeneratorRuntime()();
    module.exports = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module) {
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    module.exports = arrayPush;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e2) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/_isFlattenable.js
var require_isFlattenable = __commonJS({
  "node_modules/lodash/_isFlattenable.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    module.exports = isFlattenable;
  }
});

// node_modules/lodash/_baseFlatten.js
var require_baseFlatten = __commonJS({
  "node_modules/lodash/_baseFlatten.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isFlattenable = require_isFlattenable();
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    module.exports = baseFlatten;
  }
});

// node_modules/lodash/_copyArray.js
var require_copyArray = __commonJS({
  "node_modules/lodash/_copyArray.js"(exports, module) {
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    module.exports = copyArray;
  }
});

// node_modules/lodash/concat.js
var require_concat = __commonJS({
  "node_modules/lodash/concat.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var baseFlatten = require_baseFlatten();
    var copyArray = require_copyArray();
    var isArray = require_isArray();
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1), array = arguments[0], index = length;
      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }
    module.exports = concat;
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e2) {
        }
        try {
          return func + "";
        } catch (e2) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module) {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e2) {
      }
    }();
    module.exports = defineProperty;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/_assignMergeValue.js
var require_assignMergeValue = __commonJS({
  "node_modules/lodash/_assignMergeValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignMergeValue;
  }
});

// node_modules/lodash/_createBaseFor.js
var require_createBaseFor = __commonJS({
  "node_modules/lodash/_createBaseFor.js"(exports, module) {
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    module.exports = createBaseFor;
  }
});

// node_modules/lodash/_baseFor.js
var require_baseFor = __commonJS({
  "node_modules/lodash/_baseFor.js"(exports, module) {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module.exports = baseFor;
  }
});

// node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  "node_modules/lodash/_cloneBuffer.js"(exports, module) {
    var root = require_root();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module) {
    var root = require_root();
    var Uint8Array = root.Uint8Array;
    module.exports = Uint8Array;
  }
});

// node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
    var Uint8Array = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  }
});

// node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  }
});

// node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  "node_modules/lodash/_baseCreate.js"(exports, module) {
    var isObject = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "node_modules/lodash/_getPrototype.js"(exports, module) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  "node_modules/lodash/_initCloneObject.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module.exports = initCloneObject;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    module.exports = isArrayLike;
  }
});

// node_modules/lodash/isArrayLikeObject.js
var require_isArrayLikeObject = __commonJS({
  "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    module.exports = isArrayLikeObject;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/lodash/isPlainObject.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e2) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_safeGet.js
var require_safeGet = __commonJS({
  "node_modules/lodash/_safeGet.js"(exports, module) {
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    module.exports = safeGet;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "node_modules/lodash/_copyObject.js"(exports, module) {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module.exports = copyObject;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n2, iteratee) {
      var index = -1, result = Array(n2);
      while (++index < n2) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  }
});

// node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "node_modules/lodash/_baseKeysIn.js"(exports, module) {
    var isObject = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  }
});

// node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/lodash/keysIn.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module.exports = keysIn;
  }
});

// node_modules/lodash/toPlainObject.js
var require_toPlainObject = __commonJS({
  "node_modules/lodash/toPlainObject.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    module.exports = toPlainObject;
  }
});

// node_modules/lodash/_baseMergeDeep.js
var require_baseMergeDeep = __commonJS({
  "node_modules/lodash/_baseMergeDeep.js"(exports, module) {
    var assignMergeValue = require_assignMergeValue();
    var cloneBuffer = require_cloneBuffer();
    var cloneTypedArray = require_cloneTypedArray();
    var copyArray = require_copyArray();
    var initCloneObject = require_initCloneObject();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLikeObject = require_isArrayLikeObject();
    var isBuffer = require_isBuffer();
    var isFunction = require_isFunction();
    var isObject = require_isObject();
    var isPlainObject = require_isPlainObject();
    var isTypedArray = require_isTypedArray();
    var safeGet = require_safeGet();
    var toPlainObject = require_toPlainObject();
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    module.exports = baseMergeDeep;
  }
});

// node_modules/lodash/_baseMerge.js
var require_baseMerge = __commonJS({
  "node_modules/lodash/_baseMerge.js"(exports, module) {
    var Stack = require_Stack();
    var assignMergeValue = require_assignMergeValue();
    var baseFor = require_baseFor();
    var baseMergeDeep = require_baseMergeDeep();
    var isObject = require_isObject();
    var keysIn = require_keysIn();
    var safeGet = require_safeGet();
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    module.exports = baseMerge;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module) {
    function identity(value) {
      return value;
    }
    module.exports = identity;
  }
});

// node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/lodash/_apply.js"(exports, module) {
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply;
  }
});

// node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/lodash/_overRest.js"(exports, module) {
    var apply = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start2, transform) {
      start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start2, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start2 + index];
        }
        index = -1;
        var otherArgs = Array(start2 + 1);
        while (++index < start2) {
          otherArgs[index] = args[index];
        }
        otherArgs[start2] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/lodash/constant.js"(exports, module) {
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  }
});

// node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/lodash/_baseSetToString.js"(exports, module) {
    var constant = require_constant();
    var defineProperty = require_defineProperty();
    var identity = require_identity();
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/lodash/_shortOut.js"(exports, module) {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/lodash/_setToString.js"(exports, module) {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// node_modules/lodash/_baseRest.js
var require_baseRest = __commonJS({
  "node_modules/lodash/_baseRest.js"(exports, module) {
    var identity = require_identity();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function baseRest(func, start2) {
      return setToString(overRest(func, start2, identity), func + "");
    }
    module.exports = baseRest;
  }
});

// node_modules/lodash/_isIterateeCall.js
var require_isIterateeCall = __commonJS({
  "node_modules/lodash/_isIterateeCall.js"(exports, module) {
    var eq = require_eq();
    var isArrayLike = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject = require_isObject();
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    module.exports = isIterateeCall;
  }
});

// node_modules/lodash/_createAssigner.js
var require_createAssigner = __commonJS({
  "node_modules/lodash/_createAssigner.js"(exports, module) {
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    module.exports = createAssigner;
  }
});

// node_modules/lodash/mergeWith.js
var require_mergeWith = __commonJS({
  "node_modules/lodash/mergeWith.js"(exports, module) {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    module.exports = mergeWith;
  }
});

// node_modules/lodash/_arrayEach.js
var require_arrayEach = __commonJS({
  "node_modules/lodash/_arrayEach.js"(exports, module) {
    function arrayEach(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    module.exports = arrayEach;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  }
});

// node_modules/lodash/_baseForOwn.js
var require_baseForOwn = __commonJS({
  "node_modules/lodash/_baseForOwn.js"(exports, module) {
    var baseFor = require_baseFor();
    var keys = require_keys();
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    module.exports = baseForOwn;
  }
});

// node_modules/lodash/_createBaseEach.js
var require_createBaseEach = __commonJS({
  "node_modules/lodash/_createBaseEach.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    module.exports = createBaseEach;
  }
});

// node_modules/lodash/_baseEach.js
var require_baseEach = __commonJS({
  "node_modules/lodash/_baseEach.js"(exports, module) {
    var baseForOwn = require_baseForOwn();
    var createBaseEach = require_createBaseEach();
    var baseEach = createBaseEach(baseForOwn);
    module.exports = baseEach;
  }
});

// node_modules/lodash/_castFunction.js
var require_castFunction = __commonJS({
  "node_modules/lodash/_castFunction.js"(exports, module) {
    var identity = require_identity();
    function castFunction(value) {
      return typeof value == "function" ? value : identity;
    }
    module.exports = castFunction;
  }
});

// node_modules/lodash/forEach.js
var require_forEach = __commonJS({
  "node_modules/lodash/forEach.js"(exports, module) {
    var arrayEach = require_arrayEach();
    var baseEach = require_baseEach();
    var castFunction = require_castFunction();
    var isArray = require_isArray();
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, castFunction(iteratee));
    }
    module.exports = forEach;
  }
});

// node_modules/lodash/_baseAssign.js
var require_baseAssign = __commonJS({
  "node_modules/lodash/_baseAssign.js"(exports, module) {
    var copyObject = require_copyObject();
    var keys = require_keys();
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    module.exports = baseAssign;
  }
});

// node_modules/lodash/_baseAssignIn.js
var require_baseAssignIn = __commonJS({
  "node_modules/lodash/_baseAssignIn.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }
    module.exports = baseAssignIn;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module) {
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module) {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module.exports = getSymbols;
  }
});

// node_modules/lodash/_copySymbols.js
var require_copySymbols = __commonJS({
  "node_modules/lodash/_copySymbols.js"(exports, module) {
    var copyObject = require_copyObject();
    var getSymbols = require_getSymbols();
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    module.exports = copySymbols;
  }
});

// node_modules/lodash/_getSymbolsIn.js
var require_getSymbolsIn = __commonJS({
  "node_modules/lodash/_getSymbolsIn.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var getPrototype = require_getPrototype();
    var getSymbols = require_getSymbols();
    var stubArray = require_stubArray();
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    module.exports = getSymbolsIn;
  }
});

// node_modules/lodash/_copySymbolsIn.js
var require_copySymbolsIn = __commonJS({
  "node_modules/lodash/_copySymbolsIn.js"(exports, module) {
    var copyObject = require_copyObject();
    var getSymbolsIn = require_getSymbolsIn();
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }
    module.exports = copySymbolsIn;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module.exports = getAllKeys;
  }
});

// node_modules/lodash/_getAllKeysIn.js
var require_getAllKeysIn = __commonJS({
  "node_modules/lodash/_getAllKeysIn.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbolsIn = require_getSymbolsIn();
    var keysIn = require_keysIn();
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    module.exports = getAllKeysIn;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap2 = getNative(root, "WeakMap");
    module.exports = WeakMap2;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module) {
    var DataView = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap2 = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  }
});

// node_modules/lodash/_initCloneArray.js
var require_initCloneArray = __commonJS({
  "node_modules/lodash/_initCloneArray.js"(exports, module) {
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function initCloneArray(array) {
      var length = array.length, result = new array.constructor(length);
      if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    module.exports = initCloneArray;
  }
});

// node_modules/lodash/_cloneDataView.js
var require_cloneDataView = __commonJS({
  "node_modules/lodash/_cloneDataView.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    module.exports = cloneDataView;
  }
});

// node_modules/lodash/_cloneRegExp.js
var require_cloneRegExp = __commonJS({
  "node_modules/lodash/_cloneRegExp.js"(exports, module) {
    var reFlags = /\w*$/;
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    module.exports = cloneRegExp;
  }
});

// node_modules/lodash/_cloneSymbol.js
var require_cloneSymbol = __commonJS({
  "node_modules/lodash/_cloneSymbol.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    module.exports = cloneSymbol;
  }
});

// node_modules/lodash/_initCloneByTag.js
var require_initCloneByTag = __commonJS({
  "node_modules/lodash/_initCloneByTag.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    var cloneDataView = require_cloneDataView();
    var cloneRegExp = require_cloneRegExp();
    var cloneSymbol = require_cloneSymbol();
    var cloneTypedArray = require_cloneTypedArray();
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return new Ctor();
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return new Ctor();
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    module.exports = initCloneByTag;
  }
});

// node_modules/lodash/_baseIsMap.js
var require_baseIsMap = __commonJS({
  "node_modules/lodash/_baseIsMap.js"(exports, module) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var mapTag = "[object Map]";
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }
    module.exports = baseIsMap;
  }
});

// node_modules/lodash/isMap.js
var require_isMap = __commonJS({
  "node_modules/lodash/isMap.js"(exports, module) {
    var baseIsMap = require_baseIsMap();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsMap = nodeUtil && nodeUtil.isMap;
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    module.exports = isMap;
  }
});

// node_modules/lodash/_baseIsSet.js
var require_baseIsSet = __commonJS({
  "node_modules/lodash/_baseIsSet.js"(exports, module) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var setTag = "[object Set]";
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }
    module.exports = baseIsSet;
  }
});

// node_modules/lodash/isSet.js
var require_isSet = __commonJS({
  "node_modules/lodash/isSet.js"(exports, module) {
    var baseIsSet = require_baseIsSet();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsSet = nodeUtil && nodeUtil.isSet;
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    module.exports = isSet;
  }
});

// node_modules/lodash/_baseClone.js
var require_baseClone = __commonJS({
  "node_modules/lodash/_baseClone.js"(exports, module) {
    var Stack = require_Stack();
    var arrayEach = require_arrayEach();
    var assignValue = require_assignValue();
    var baseAssign = require_baseAssign();
    var baseAssignIn = require_baseAssignIn();
    var cloneBuffer = require_cloneBuffer();
    var copyArray = require_copyArray();
    var copySymbols = require_copySymbols();
    var copySymbolsIn = require_copySymbolsIn();
    var getAllKeys = require_getAllKeys();
    var getAllKeysIn = require_getAllKeysIn();
    var getTag = require_getTag();
    var initCloneArray = require_initCloneArray();
    var initCloneByTag = require_initCloneByTag();
    var initCloneObject = require_initCloneObject();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isMap = require_isMap();
    var isObject = require_isObject();
    var isSet = require_isSet();
    var keys = require_keys();
    var keysIn = require_keysIn();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key2) {
          result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
      var props = isArr ? void 0 : keysFunc(value);
      arrayEach(props || value, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
      return result;
    }
    module.exports = baseClone;
  }
});

// node_modules/lodash/cloneDeep.js
var require_cloneDeep = __commonJS({
  "node_modules/lodash/cloneDeep.js"(exports, module) {
    var baseClone = require_baseClone();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_SYMBOLS_FLAG = 4;
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }
    module.exports = cloneDeep;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  }
});

// node_modules/lodash/_baseFindIndex.js
var require_baseFindIndex = __commonJS({
  "node_modules/lodash/_baseFindIndex.js"(exports, module) {
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    module.exports = baseFindIndex;
  }
});

// node_modules/lodash/_baseIsNaN.js
var require_baseIsNaN = __commonJS({
  "node_modules/lodash/_baseIsNaN.js"(exports, module) {
    function baseIsNaN(value) {
      return value !== value;
    }
    module.exports = baseIsNaN;
  }
});

// node_modules/lodash/_strictIndexOf.js
var require_strictIndexOf = __commonJS({
  "node_modules/lodash/_strictIndexOf.js"(exports, module) {
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    module.exports = strictIndexOf;
  }
});

// node_modules/lodash/_baseIndexOf.js
var require_baseIndexOf = __commonJS({
  "node_modules/lodash/_baseIndexOf.js"(exports, module) {
    var baseFindIndex = require_baseFindIndex();
    var baseIsNaN = require_baseIsNaN();
    var strictIndexOf = require_strictIndexOf();
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    module.exports = baseIndexOf;
  }
});

// node_modules/lodash/_arrayIncludes.js
var require_arrayIncludes = __commonJS({
  "node_modules/lodash/_arrayIncludes.js"(exports, module) {
    var baseIndexOf = require_baseIndexOf();
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    module.exports = arrayIncludes;
  }
});

// node_modules/lodash/_arrayIncludesWith.js
var require_arrayIncludesWith = __commonJS({
  "node_modules/lodash/_arrayIncludesWith.js"(exports, module) {
    function arrayIncludesWith(array, value, comparator) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }
    module.exports = arrayIncludesWith;
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module) {
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    module.exports = arrayMap;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module) {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module.exports = cacheHas;
  }
});

// node_modules/lodash/_baseDifference.js
var require_baseDifference = __commonJS({
  "node_modules/lodash/_baseDifference.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var arrayMap = require_arrayMap();
    var baseUnary = require_baseUnary();
    var cacheHas = require_cacheHas();
    var LARGE_ARRAY_SIZE = 200;
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
        while (++index < length) {
          var value = array[index], computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseDifference;
  }
});

// node_modules/lodash/without.js
var require_without = __commonJS({
  "node_modules/lodash/without.js"(exports, module) {
    var baseDifference = require_baseDifference();
    var baseRest = require_baseRest();
    var isArrayLikeObject = require_isArrayLikeObject();
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, values) : [];
    });
    module.exports = without;
  }
});

// node_modules/lodash/_trimmedEndIndex.js
var require_trimmedEndIndex = __commonJS({
  "node_modules/lodash/_trimmedEndIndex.js"(exports, module) {
    var reWhitespace = /\s/;
    function trimmedEndIndex(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    module.exports = trimmedEndIndex;
  }
});

// node_modules/lodash/_baseTrim.js
var require_baseTrim = __commonJS({
  "node_modules/lodash/_baseTrim.js"(exports, module) {
    var trimmedEndIndex = require_trimmedEndIndex();
    var reTrimStart = /^\s+/;
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    module.exports = baseTrim;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/toNumber.js
var require_toNumber = __commonJS({
  "node_modules/lodash/toNumber.js"(exports, module) {
    var baseTrim = require_baseTrim();
    var isObject = require_isObject();
    var isSymbol = require_isSymbol();
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = toNumber;
  }
});

// node_modules/lodash/toFinite.js
var require_toFinite = __commonJS({
  "node_modules/lodash/toFinite.js"(exports, module) {
    var toNumber = require_toNumber();
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    module.exports = toFinite;
  }
});

// node_modules/lodash/toInteger.js
var require_toInteger = __commonJS({
  "node_modules/lodash/toInteger.js"(exports, module) {
    var toFinite = require_toFinite();
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    module.exports = toInteger;
  }
});

// node_modules/lodash/before.js
var require_before = __commonJS({
  "node_modules/lodash/before.js"(exports, module) {
    var toInteger = require_toInteger();
    var FUNC_ERROR_TEXT = "Expected a function";
    function before(n2, func) {
      var result;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n2 = toInteger(n2);
      return function() {
        if (--n2 > 0) {
          result = func.apply(this, arguments);
        }
        if (n2 <= 1) {
          func = void 0;
        }
        return result;
      };
    }
    module.exports = before;
  }
});

// node_modules/lodash/once.js
var require_once = __commonJS({
  "node_modules/lodash/once.js"(exports, module) {
    var before = require_before();
    function once(func) {
      return before(2, func);
    }
    module.exports = once;
  }
});

// node_modules/lodash/_arrayReduce.js
var require_arrayReduce = __commonJS({
  "node_modules/lodash/_arrayReduce.js"(exports, module) {
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1, length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    module.exports = arrayReduce;
  }
});

// node_modules/lodash/_basePropertyOf.js
var require_basePropertyOf = __commonJS({
  "node_modules/lodash/_basePropertyOf.js"(exports, module) {
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    module.exports = basePropertyOf;
  }
});

// node_modules/lodash/_deburrLetter.js
var require_deburrLetter = __commonJS({
  "node_modules/lodash/_deburrLetter.js"(exports, module) {
    var basePropertyOf = require_basePropertyOf();
    var deburredLetters = {
      "\xC0": "A",
      "\xC1": "A",
      "\xC2": "A",
      "\xC3": "A",
      "\xC4": "A",
      "\xC5": "A",
      "\xE0": "a",
      "\xE1": "a",
      "\xE2": "a",
      "\xE3": "a",
      "\xE4": "a",
      "\xE5": "a",
      "\xC7": "C",
      "\xE7": "c",
      "\xD0": "D",
      "\xF0": "d",
      "\xC8": "E",
      "\xC9": "E",
      "\xCA": "E",
      "\xCB": "E",
      "\xE8": "e",
      "\xE9": "e",
      "\xEA": "e",
      "\xEB": "e",
      "\xCC": "I",
      "\xCD": "I",
      "\xCE": "I",
      "\xCF": "I",
      "\xEC": "i",
      "\xED": "i",
      "\xEE": "i",
      "\xEF": "i",
      "\xD1": "N",
      "\xF1": "n",
      "\xD2": "O",
      "\xD3": "O",
      "\xD4": "O",
      "\xD5": "O",
      "\xD6": "O",
      "\xD8": "O",
      "\xF2": "o",
      "\xF3": "o",
      "\xF4": "o",
      "\xF5": "o",
      "\xF6": "o",
      "\xF8": "o",
      "\xD9": "U",
      "\xDA": "U",
      "\xDB": "U",
      "\xDC": "U",
      "\xF9": "u",
      "\xFA": "u",
      "\xFB": "u",
      "\xFC": "u",
      "\xDD": "Y",
      "\xFD": "y",
      "\xFF": "y",
      "\xC6": "Ae",
      "\xE6": "ae",
      "\xDE": "Th",
      "\xFE": "th",
      "\xDF": "ss",
      "\u0100": "A",
      "\u0102": "A",
      "\u0104": "A",
      "\u0101": "a",
      "\u0103": "a",
      "\u0105": "a",
      "\u0106": "C",
      "\u0108": "C",
      "\u010A": "C",
      "\u010C": "C",
      "\u0107": "c",
      "\u0109": "c",
      "\u010B": "c",
      "\u010D": "c",
      "\u010E": "D",
      "\u0110": "D",
      "\u010F": "d",
      "\u0111": "d",
      "\u0112": "E",
      "\u0114": "E",
      "\u0116": "E",
      "\u0118": "E",
      "\u011A": "E",
      "\u0113": "e",
      "\u0115": "e",
      "\u0117": "e",
      "\u0119": "e",
      "\u011B": "e",
      "\u011C": "G",
      "\u011E": "G",
      "\u0120": "G",
      "\u0122": "G",
      "\u011D": "g",
      "\u011F": "g",
      "\u0121": "g",
      "\u0123": "g",
      "\u0124": "H",
      "\u0126": "H",
      "\u0125": "h",
      "\u0127": "h",
      "\u0128": "I",
      "\u012A": "I",
      "\u012C": "I",
      "\u012E": "I",
      "\u0130": "I",
      "\u0129": "i",
      "\u012B": "i",
      "\u012D": "i",
      "\u012F": "i",
      "\u0131": "i",
      "\u0134": "J",
      "\u0135": "j",
      "\u0136": "K",
      "\u0137": "k",
      "\u0138": "k",
      "\u0139": "L",
      "\u013B": "L",
      "\u013D": "L",
      "\u013F": "L",
      "\u0141": "L",
      "\u013A": "l",
      "\u013C": "l",
      "\u013E": "l",
      "\u0140": "l",
      "\u0142": "l",
      "\u0143": "N",
      "\u0145": "N",
      "\u0147": "N",
      "\u014A": "N",
      "\u0144": "n",
      "\u0146": "n",
      "\u0148": "n",
      "\u014B": "n",
      "\u014C": "O",
      "\u014E": "O",
      "\u0150": "O",
      "\u014D": "o",
      "\u014F": "o",
      "\u0151": "o",
      "\u0154": "R",
      "\u0156": "R",
      "\u0158": "R",
      "\u0155": "r",
      "\u0157": "r",
      "\u0159": "r",
      "\u015A": "S",
      "\u015C": "S",
      "\u015E": "S",
      "\u0160": "S",
      "\u015B": "s",
      "\u015D": "s",
      "\u015F": "s",
      "\u0161": "s",
      "\u0162": "T",
      "\u0164": "T",
      "\u0166": "T",
      "\u0163": "t",
      "\u0165": "t",
      "\u0167": "t",
      "\u0168": "U",
      "\u016A": "U",
      "\u016C": "U",
      "\u016E": "U",
      "\u0170": "U",
      "\u0172": "U",
      "\u0169": "u",
      "\u016B": "u",
      "\u016D": "u",
      "\u016F": "u",
      "\u0171": "u",
      "\u0173": "u",
      "\u0174": "W",
      "\u0175": "w",
      "\u0176": "Y",
      "\u0177": "y",
      "\u0178": "Y",
      "\u0179": "Z",
      "\u017B": "Z",
      "\u017D": "Z",
      "\u017A": "z",
      "\u017C": "z",
      "\u017E": "z",
      "\u0132": "IJ",
      "\u0133": "ij",
      "\u0152": "Oe",
      "\u0153": "oe",
      "\u0149": "'n",
      "\u017F": "s"
    };
    var deburrLetter = basePropertyOf(deburredLetters);
    module.exports = deburrLetter;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module) {
    var baseToString = require_baseToString();
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString;
  }
});

// node_modules/lodash/deburr.js
var require_deburr = __commonJS({
  "node_modules/lodash/deburr.js"(exports, module) {
    var deburrLetter = require_deburrLetter();
    var toString = require_toString();
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsCombo = "[" + rsComboRange + "]";
    var reComboMark = RegExp(rsCombo, "g");
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    module.exports = deburr;
  }
});

// node_modules/lodash/_asciiWords.js
var require_asciiWords = __commonJS({
  "node_modules/lodash/_asciiWords.js"(exports, module) {
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }
    module.exports = asciiWords;
  }
});

// node_modules/lodash/_hasUnicodeWord.js
var require_hasUnicodeWord = __commonJS({
  "node_modules/lodash/_hasUnicodeWord.js"(exports, module) {
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }
    module.exports = hasUnicodeWord;
  }
});

// node_modules/lodash/_unicodeWords.js
var require_unicodeWords = __commonJS({
  "node_modules/lodash/_unicodeWords.js"(exports, module) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsDingbatRange = "\\u2700-\\u27bf";
    var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
    var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
    var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    var rsPunctuationRange = "\\u2000-\\u206f";
    var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]";
    var rsBreak = "[" + rsBreakRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsDigits = "\\d+";
    var rsDingbat = "[" + rsDingbatRange + "]";
    var rsLower = "[" + rsLowerRange + "]";
    var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsUpper = "[" + rsUpperRange + "]";
    var rsZWJ = "\\u200d";
    var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")";
    var rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")";
    var rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
    var rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
    var rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
      rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
      rsUpper + "+" + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }
    module.exports = unicodeWords;
  }
});

// node_modules/lodash/words.js
var require_words = __commonJS({
  "node_modules/lodash/words.js"(exports, module) {
    var asciiWords = require_asciiWords();
    var hasUnicodeWord = require_hasUnicodeWord();
    var toString = require_toString();
    var unicodeWords = require_unicodeWords();
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? void 0 : pattern;
      if (pattern === void 0) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }
    module.exports = words;
  }
});

// node_modules/lodash/_createCompounder.js
var require_createCompounder = __commonJS({
  "node_modules/lodash/_createCompounder.js"(exports, module) {
    var arrayReduce = require_arrayReduce();
    var deburr = require_deburr();
    var words = require_words();
    var rsApos = "['\u2019]";
    var reApos = RegExp(rsApos, "g");
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
      };
    }
    module.exports = createCompounder;
  }
});

// node_modules/lodash/snakeCase.js
var require_snakeCase = __commonJS({
  "node_modules/lodash/snakeCase.js"(exports, module) {
    var createCompounder = require_createCompounder();
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? "_" : "") + word.toLowerCase();
    });
    module.exports = snakeCase;
  }
});

// node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self2 = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self2, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}

// node_modules/qiankun/es/apis.js
var import_noop4 = __toESM(require_noop());

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key = sourceSymbolKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}

// node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}

// node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter2) {
  if (typeof Symbol !== "undefined" && iter2[Symbol.iterator] != null || iter2["@@iterator"] != null)
    return Array.from(iter2);
}

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o2, minLen);
}

// node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/@babel/runtime/helpers/esm/objectSpread2.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    i2 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}

// node_modules/qiankun/es/apis.js
var import_regenerator6 = __toESM(require_regenerator());

// node_modules/single-spa/lib/esm/single-spa.min.js
var t = Object.freeze({ __proto__: null, get start() {
  return xt;
}, get ensureJQuerySupport() {
  return ft;
}, get setBootstrapMaxTime() {
  return F;
}, get setMountMaxTime() {
  return J;
}, get setUnmountMaxTime() {
  return H;
}, get setUnloadMaxTime() {
  return Q;
}, get registerApplication() {
  return Ot;
}, get unregisterApplication() {
  return Tt;
}, get getMountedApps() {
  return Et;
}, get getAppStatus() {
  return Pt;
}, get unloadApplication() {
  return At;
}, get checkActivityFunctions() {
  return bt;
}, get getAppNames() {
  return yt;
}, get pathToActiveWhen() {
  return _t;
}, get navigateToUrl() {
  return nt;
}, get triggerAppChange() {
  return Mt;
}, get addErrorHandler() {
  return a;
}, get removeErrorHandler() {
  return c;
}, get mountRootParcel() {
  return C;
}, get NOT_LOADED() {
  return l;
}, get LOADING_SOURCE_CODE() {
  return p;
}, get NOT_BOOTSTRAPPED() {
  return h;
}, get BOOTSTRAPPING() {
  return m;
}, get NOT_MOUNTED() {
  return v;
}, get MOUNTING() {
  return d;
}, get UPDATING() {
  return g;
}, get LOAD_ERROR() {
  return y;
}, get MOUNTED() {
  return w;
}, get UNMOUNTING() {
  return E;
}, get SKIP_BECAUSE_BROKEN() {
  return P;
} });
function n(t2) {
  return (n = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t3) {
    return typeof t3;
  } : function(t3) {
    return t3 && typeof Symbol == "function" && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
  })(t2);
}
function e(t2, n2, e2) {
  return n2 in t2 ? Object.defineProperty(t2, n2, { value: e2, enumerable: true, configurable: true, writable: true }) : t2[n2] = e2, t2;
}
var r = (typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : {}).CustomEvent;
var o = function() {
  try {
    var t2 = new r("cat", { detail: { foo: "bar" } });
    return t2.type === "cat" && t2.detail.foo === "bar";
  } catch (t3) {
  }
  return false;
}() ? r : typeof document != "undefined" && typeof document.createEvent == "function" ? function(t2, n2) {
  var e2 = document.createEvent("CustomEvent");
  return n2 ? e2.initCustomEvent(t2, n2.bubbles, n2.cancelable, n2.detail) : e2.initCustomEvent(t2, false, false, void 0), e2;
} : function(t2, n2) {
  var e2 = document.createEventObject();
  return e2.type = t2, n2 ? (e2.bubbles = Boolean(n2.bubbles), e2.cancelable = Boolean(n2.cancelable), e2.detail = n2.detail) : (e2.bubbles = false, e2.cancelable = false, e2.detail = void 0), e2;
};
var i = [];
function u(t2, n2, e2) {
  var r2 = f(t2, n2, e2);
  i.length ? i.forEach(function(t3) {
    return t3(r2);
  }) : setTimeout(function() {
    throw r2;
  });
}
function a(t2) {
  if (typeof t2 != "function")
    throw Error(s(28, false));
  i.push(t2);
}
function c(t2) {
  if (typeof t2 != "function")
    throw Error(s(29, false));
  var n2 = false;
  return i = i.filter(function(e2) {
    var r2 = e2 === t2;
    return n2 = n2 || r2, !r2;
  }), n2;
}
function s(t2, n2) {
  for (var e2 = arguments.length, r2 = new Array(e2 > 2 ? e2 - 2 : 0), o2 = 2; o2 < e2; o2++)
    r2[o2 - 2] = arguments[o2];
  return "single-spa minified message #".concat(t2, ": ").concat(n2 ? n2 + " " : "", "See https://single-spa.js.org/error/?code=").concat(t2).concat(r2.length ? "&arg=".concat(r2.join("&arg=")) : "");
}
function f(t2, n2, e2) {
  var r2, o2 = "".concat(N(n2), " '").concat(T(n2), "' died in status ").concat(n2.status, ": ");
  if (t2 instanceof Error) {
    try {
      t2.message = o2 + t2.message;
    } catch (t3) {
    }
    r2 = t2;
  } else {
    console.warn(s(30, false, n2.status, T(n2)));
    try {
      r2 = Error(o2 + JSON.stringify(t2));
    } catch (n3) {
      r2 = t2;
    }
  }
  return r2.appOrParcelName = T(n2), n2.status = e2, r2;
}
var l = "NOT_LOADED";
var p = "LOADING_SOURCE_CODE";
var h = "NOT_BOOTSTRAPPED";
var m = "BOOTSTRAPPING";
var v = "NOT_MOUNTED";
var d = "MOUNTING";
var w = "MOUNTED";
var g = "UPDATING";
var E = "UNMOUNTING";
var y = "LOAD_ERROR";
var P = "SKIP_BECAUSE_BROKEN";
function O(t2) {
  return t2.status === w;
}
function b(t2) {
  try {
    return t2.activeWhen(window.location);
  } catch (n2) {
    return u(n2, t2, P), false;
  }
}
function T(t2) {
  return t2.name;
}
function A(t2) {
  return Boolean(t2.unmountThisParcel);
}
function N(t2) {
  return A(t2) ? "parcel" : "application";
}
function S() {
  for (var t2 = arguments.length - 1; t2 > 0; t2--)
    for (var n2 in arguments[t2])
      n2 !== "__proto__" && (arguments[t2 - 1][n2] = arguments[t2][n2]);
  return arguments[0];
}
function _(t2, n2) {
  for (var e2 = 0; e2 < t2.length; e2++)
    if (n2(t2[e2]))
      return t2[e2];
  return null;
}
function D(t2) {
  return t2 && (typeof t2 == "function" || (n2 = t2, Array.isArray(n2) && !_(n2, function(t3) {
    return typeof t3 != "function";
  })));
  var n2;
}
function U(t2, n2) {
  var e2 = t2[n2] || [];
  (e2 = Array.isArray(e2) ? e2 : [e2]).length === 0 && (e2 = [function() {
    return Promise.resolve();
  }]);
  var r2 = N(t2), o2 = T(t2);
  return function(t3) {
    return e2.reduce(function(e3, i2, u2) {
      return e3.then(function() {
        var e4 = i2(t3);
        return j(e4) ? e4 : Promise.reject(s(15, false, r2, o2, n2, u2));
      });
    }, Promise.resolve());
  };
}
function j(t2) {
  return t2 && typeof t2.then == "function" && typeof t2.catch == "function";
}
function M(t2, n2) {
  return Promise.resolve().then(function() {
    return t2.status !== h ? t2 : (t2.status = m, t2.bootstrap ? V(t2, "bootstrap").then(e2).catch(function(e3) {
      if (n2)
        throw f(e3, t2, P);
      return u(e3, t2, P), t2;
    }) : Promise.resolve().then(e2));
  });
  function e2() {
    return t2.status = v, t2;
  }
}
function L(t2, n2) {
  return Promise.resolve().then(function() {
    if (t2.status !== w)
      return t2;
    t2.status = E;
    var e2 = Object.keys(t2.parcels).map(function(n3) {
      return t2.parcels[n3].unmountThisParcel();
    });
    return Promise.all(e2).then(r2, function(e3) {
      return r2().then(function() {
        var r3 = Error(e3.message);
        if (n2)
          throw f(r3, t2, P);
        u(r3, t2, P);
      });
    }).then(function() {
      return t2;
    });
    function r2() {
      return V(t2, "unmount").then(function() {
        t2.status = v;
      }).catch(function(e3) {
        if (n2)
          throw f(e3, t2, P);
        u(e3, t2, P);
      });
    }
  });
}
var R = false;
var I = false;
function x(t2, n2) {
  return Promise.resolve().then(function() {
    return t2.status !== v ? t2 : (R || (window.dispatchEvent(new o("single-spa:before-first-mount")), R = true), V(t2, "mount").then(function() {
      return t2.status = w, I || (window.dispatchEvent(new o("single-spa:first-mount")), I = true), t2;
    }).catch(function(e2) {
      return t2.status = w, L(t2, true).then(r2, r2);
      function r2() {
        if (n2)
          throw f(e2, t2, P);
        return u(e2, t2, P), t2;
      }
    }));
  });
}
var B = 0;
var G = { parcels: {} };
function C() {
  return W.apply(G, arguments);
}
function W(t2, e2) {
  var r2 = this;
  if (!t2 || n(t2) !== "object" && typeof t2 != "function")
    throw Error(s(2, false));
  if (t2.name && typeof t2.name != "string")
    throw Error(s(3, false, n(t2.name)));
  if (n(e2) !== "object")
    throw Error(s(4, false, name, n(e2)));
  if (!e2.domElement)
    throw Error(s(5, false, name));
  var o2, i2 = B++, u2 = typeof t2 == "function", a2 = u2 ? t2 : function() {
    return Promise.resolve(t2);
  }, c2 = { id: i2, parcels: {}, status: u2 ? p : h, customProps: e2, parentName: T(r2), unmountThisParcel: function() {
    return y2.then(function() {
      if (c2.status !== w)
        throw Error(s(6, false, name, c2.status));
      return L(c2, true);
    }).then(function(t3) {
      return c2.parentName && delete r2.parcels[c2.id], t3;
    }).then(function(t3) {
      return m2(t3), t3;
    }).catch(function(t3) {
      throw c2.status = P, d2(t3), t3;
    });
  } };
  r2.parcels[i2] = c2;
  var l2 = a2();
  if (!l2 || typeof l2.then != "function")
    throw Error(s(7, false));
  var m2, d2, E2 = (l2 = l2.then(function(t3) {
    if (!t3)
      throw Error(s(8, false));
    var n2 = t3.name || "parcel-".concat(i2);
    if (Object.prototype.hasOwnProperty.call(t3, "bootstrap") && !D(t3.bootstrap))
      throw Error(s(9, false, n2));
    if (!D(t3.mount))
      throw Error(s(10, false, n2));
    if (!D(t3.unmount))
      throw Error(s(11, false, n2));
    if (t3.update && !D(t3.update))
      throw Error(s(12, false, n2));
    var e3 = U(t3, "bootstrap"), r3 = U(t3, "mount"), u3 = U(t3, "unmount");
    c2.status = h, c2.name = n2, c2.bootstrap = e3, c2.mount = r3, c2.unmount = u3, c2.timeouts = q(t3.timeouts), t3.update && (c2.update = U(t3, "update"), o2.update = function(t4) {
      return c2.customProps = t4, $(function(t5) {
        return Promise.resolve().then(function() {
          if (t5.status !== w)
            throw Error(s(32, false, T(t5)));
          return t5.status = g, V(t5, "update").then(function() {
            return t5.status = w, t5;
          }).catch(function(n3) {
            throw f(n3, t5, P);
          });
        });
      }(c2));
    });
  })).then(function() {
    return M(c2, true);
  }), y2 = E2.then(function() {
    return x(c2, true);
  }), O2 = new Promise(function(t3, n2) {
    m2 = t3, d2 = n2;
  });
  return o2 = { mount: function() {
    return $(Promise.resolve().then(function() {
      if (c2.status !== v)
        throw Error(s(13, false, name, c2.status));
      return r2.parcels[i2] = c2, x(c2);
    }));
  }, unmount: function() {
    return $(c2.unmountThisParcel());
  }, getStatus: function() {
    return c2.status;
  }, loadPromise: $(l2), bootstrapPromise: $(E2), mountPromise: $(y2), unmountPromise: $(O2) };
}
function $(t2) {
  return t2.then(function() {
    return null;
  });
}
function k(e2) {
  var r2 = T(e2), o2 = typeof e2.customProps == "function" ? e2.customProps(r2, window.location) : e2.customProps;
  (n(o2) !== "object" || o2 === null || Array.isArray(o2)) && (o2 = {}, console.warn(s(40, false), r2, o2));
  var i2 = S({}, o2, { name: r2, mountParcel: W.bind(e2), singleSpa: t });
  return A(e2) && (i2.unmountSelf = e2.unmountThisParcel), i2;
}
var K = { bootstrap: { millis: 4e3, dieOnTimeout: false, warningMillis: 1e3 }, mount: { millis: 3e3, dieOnTimeout: false, warningMillis: 1e3 }, unmount: { millis: 3e3, dieOnTimeout: false, warningMillis: 1e3 }, unload: { millis: 3e3, dieOnTimeout: false, warningMillis: 1e3 }, update: { millis: 3e3, dieOnTimeout: false, warningMillis: 1e3 } };
function F(t2, n2, e2) {
  if (typeof t2 != "number" || t2 <= 0)
    throw Error(s(16, false));
  K.bootstrap = { millis: t2, dieOnTimeout: n2, warningMillis: e2 || 1e3 };
}
function J(t2, n2, e2) {
  if (typeof t2 != "number" || t2 <= 0)
    throw Error(s(17, false));
  K.mount = { millis: t2, dieOnTimeout: n2, warningMillis: e2 || 1e3 };
}
function H(t2, n2, e2) {
  if (typeof t2 != "number" || t2 <= 0)
    throw Error(s(18, false));
  K.unmount = { millis: t2, dieOnTimeout: n2, warningMillis: e2 || 1e3 };
}
function Q(t2, n2, e2) {
  if (typeof t2 != "number" || t2 <= 0)
    throw Error(s(19, false));
  K.unload = { millis: t2, dieOnTimeout: n2, warningMillis: e2 || 1e3 };
}
function V(t2, n2) {
  var e2 = t2.timeouts[n2], r2 = e2.warningMillis, o2 = N(t2);
  return new Promise(function(i2, u2) {
    var a2 = false, c2 = false;
    t2[n2](k(t2)).then(function(t3) {
      a2 = true, i2(t3);
    }).catch(function(t3) {
      a2 = true, u2(t3);
    }), setTimeout(function() {
      return l2(1);
    }, r2), setTimeout(function() {
      return l2(true);
    }, e2.millis);
    var f2 = s(31, false, n2, o2, T(t2), e2.millis);
    function l2(t3) {
      if (!a2) {
        if (t3 === true)
          c2 = true, e2.dieOnTimeout ? u2(Error(f2)) : console.error(f2);
        else if (!c2) {
          var n3 = t3, o3 = n3 * r2;
          console.warn(f2), o3 + r2 < e2.millis && setTimeout(function() {
            return l2(n3 + 1);
          }, r2);
        }
      }
    }
  });
}
function q(t2) {
  var n2 = {};
  for (var e2 in K)
    n2[e2] = S({}, K[e2], t2 && t2[e2] || {});
  return n2;
}
function z(t2) {
  return Promise.resolve().then(function() {
    return t2.loadPromise ? t2.loadPromise : t2.status !== l && t2.status !== y ? t2 : (t2.status = p, t2.loadPromise = Promise.resolve().then(function() {
      var o2 = t2.loadApp(k(t2));
      if (!j(o2))
        throw r2 = true, Error(s(33, false, T(t2)));
      return o2.then(function(r3) {
        var o3;
        t2.loadErrorTime = null, n(e2 = r3) !== "object" && (o3 = 34), Object.prototype.hasOwnProperty.call(e2, "bootstrap") && !D(e2.bootstrap) && (o3 = 35), D(e2.mount) || (o3 = 36), D(e2.unmount) || (o3 = 37);
        var i2 = N(e2);
        if (o3) {
          var a2;
          try {
            a2 = JSON.stringify(e2);
          } catch (t3) {
          }
          return console.error(s(o3, false, i2, T(t2), a2), e2), u(void 0, t2, P), t2;
        }
        return e2.devtools && e2.devtools.overlays && (t2.devtools.overlays = S({}, t2.devtools.overlays, e2.devtools.overlays)), t2.status = h, t2.bootstrap = U(e2, "bootstrap"), t2.mount = U(e2, "mount"), t2.unmount = U(e2, "unmount"), t2.unload = U(e2, "unload"), t2.timeouts = q(e2.timeouts), delete t2.loadPromise, t2;
      });
    }).catch(function(n2) {
      var e3;
      return delete t2.loadPromise, r2 ? e3 = P : (e3 = y, t2.loadErrorTime = new Date().getTime()), u(n2, t2, e3), t2;
    }));
    var e2, r2;
  });
}
var X;
var Y = typeof window != "undefined";
var Z = { hashchange: [], popstate: [] };
var tt = ["hashchange", "popstate"];
function nt(t2) {
  var n2;
  if (typeof t2 == "string")
    n2 = t2;
  else if (this && this.href)
    n2 = this.href;
  else {
    if (!(t2 && t2.currentTarget && t2.currentTarget.href && t2.preventDefault))
      throw Error(s(14, false));
    n2 = t2.currentTarget.href, t2.preventDefault();
  }
  var e2 = ct(window.location.href), r2 = ct(n2);
  n2.indexOf("#") === 0 ? window.location.hash = r2.hash : e2.host !== r2.host && r2.host ? window.location.href = n2 : r2.pathname === e2.pathname && r2.search === e2.search ? window.location.hash = r2.hash : window.history.pushState(null, null, n2);
}
function et(t2) {
  var n2 = this;
  if (t2) {
    var e2 = t2[0].type;
    tt.indexOf(e2) >= 0 && Z[e2].forEach(function(e3) {
      try {
        e3.apply(n2, t2);
      } catch (t3) {
        setTimeout(function() {
          throw t3;
        });
      }
    });
  }
}
function rt() {
  Lt([], arguments);
}
function ot(t2, n2) {
  return function() {
    var e2 = window.location.href, r2 = t2.apply(this, arguments), o2 = window.location.href;
    return X && e2 === o2 || (Bt() ? window.dispatchEvent(it(window.history.state, n2)) : Lt([])), r2;
  };
}
function it(t2, n2) {
  var e2;
  try {
    e2 = new PopStateEvent("popstate", { state: t2 });
  } catch (n3) {
    (e2 = document.createEvent("PopStateEvent")).initPopStateEvent("popstate", false, false, t2);
  }
  return e2.singleSpa = true, e2.singleSpaTrigger = n2, e2;
}
if (Y) {
  window.addEventListener("hashchange", rt), window.addEventListener("popstate", rt);
  ut = window.addEventListener, at = window.removeEventListener;
  window.addEventListener = function(t2, n2) {
    if (!(typeof n2 == "function" && tt.indexOf(t2) >= 0) || _(Z[t2], function(t3) {
      return t3 === n2;
    }))
      return ut.apply(this, arguments);
    Z[t2].push(n2);
  }, window.removeEventListener = function(t2, n2) {
    if (!(typeof n2 == "function" && tt.indexOf(t2) >= 0))
      return at.apply(this, arguments);
    Z[t2] = Z[t2].filter(function(t3) {
      return t3 !== n2;
    });
  }, window.history.pushState = ot(window.history.pushState, "pushState"), window.history.replaceState = ot(window.history.replaceState, "replaceState"), window.singleSpaNavigate ? console.warn(s(41, false)) : window.singleSpaNavigate = nt;
}
var ut;
var at;
function ct(t2) {
  var n2 = document.createElement("a");
  return n2.href = t2, n2;
}
var st = false;
function ft() {
  var t2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.jQuery;
  if (t2 || window.$ && window.$.fn && window.$.fn.jquery && (t2 = window.$), t2 && !st) {
    var n2 = t2.fn.on, e2 = t2.fn.off;
    t2.fn.on = function(t3, e3) {
      return lt.call(this, n2, window.addEventListener, t3, e3, arguments);
    }, t2.fn.off = function(t3, n3) {
      return lt.call(this, e2, window.removeEventListener, t3, n3, arguments);
    }, st = true;
  }
}
function lt(t2, n2, e2, r2, o2) {
  return typeof e2 != "string" ? t2.apply(this, o2) : (e2.split(/\s+/).forEach(function(t3) {
    tt.indexOf(t3) >= 0 && (n2(t3, r2), e2 = e2.replace(t3, ""));
  }), e2.trim() === "" ? this : t2.apply(this, o2));
}
var pt = {};
function ht(t2) {
  return Promise.resolve().then(function() {
    var n2 = pt[T(t2)];
    if (!n2)
      return t2;
    if (t2.status === l)
      return mt(t2, n2), t2;
    if (t2.status === "UNLOADING")
      return n2.promise.then(function() {
        return t2;
      });
    if (t2.status !== v && t2.status !== y)
      return t2;
    var e2 = t2.status === y ? Promise.resolve() : V(t2, "unload");
    return t2.status = "UNLOADING", e2.then(function() {
      return mt(t2, n2), t2;
    }).catch(function(e3) {
      return function(t3, n3, e4) {
        delete pt[T(t3)], delete t3.bootstrap, delete t3.mount, delete t3.unmount, delete t3.unload, u(e4, t3, P), n3.reject(e4);
      }(t2, n2, e3), t2;
    });
  });
}
function mt(t2, n2) {
  delete pt[T(t2)], delete t2.bootstrap, delete t2.mount, delete t2.unmount, delete t2.unload, t2.status = l, n2.resolve();
}
function vt(t2, n2, e2, r2) {
  pt[T(t2)] = { app: t2, resolve: e2, reject: r2 }, Object.defineProperty(pt[T(t2)], "promise", { get: n2 });
}
function dt(t2) {
  return pt[t2];
}
var wt = [];
function gt() {
  var t2 = [], n2 = [], e2 = [], r2 = [], o2 = new Date().getTime();
  return wt.forEach(function(i2) {
    var u2 = i2.status !== P && b(i2);
    switch (i2.status) {
      case y:
        u2 && o2 - i2.loadErrorTime >= 200 && e2.push(i2);
        break;
      case l:
      case p:
        u2 && e2.push(i2);
        break;
      case h:
      case v:
        !u2 && dt(T(i2)) ? t2.push(i2) : u2 && r2.push(i2);
        break;
      case w:
        u2 || n2.push(i2);
    }
  }), { appsToUnload: t2, appsToUnmount: n2, appsToLoad: e2, appsToMount: r2 };
}
function Et() {
  return wt.filter(O).map(T);
}
function yt() {
  return wt.map(T);
}
function Pt(t2) {
  var n2 = _(wt, function(n3) {
    return T(n3) === t2;
  });
  return n2 ? n2.status : null;
}
function Ot(t2, e2, r2, o2) {
  var i2 = function(t3, e3, r3, o3) {
    var i3, u2 = { name: null, loadApp: null, activeWhen: null, customProps: null };
    return n(t3) === "object" ? (function(t4) {
      if (Array.isArray(t4) || t4 === null)
        throw Error(s(39, false));
      var e4 = ["name", "app", "activeWhen", "customProps"], r4 = Object.keys(t4).reduce(function(t5, n2) {
        return e4.indexOf(n2) >= 0 ? t5 : t5.concat(n2);
      }, []);
      if (r4.length !== 0)
        throw Error(s(38, false, e4.join(", "), r4.join(", ")));
      if (typeof t4.name != "string" || t4.name.length === 0)
        throw Error(s(20, false));
      if (n(t4.app) !== "object" && typeof t4.app != "function")
        throw Error(s(20, false));
      var o4 = function(t5) {
        return typeof t5 == "string" || typeof t5 == "function";
      };
      if (!(o4(t4.activeWhen) || Array.isArray(t4.activeWhen) && t4.activeWhen.every(o4)))
        throw Error(s(24, false));
      if (!St(t4.customProps))
        throw Error(s(22, false));
    }(t3), u2.name = t3.name, u2.loadApp = t3.app, u2.activeWhen = t3.activeWhen, u2.customProps = t3.customProps) : (function(t4, n2, e4, r4) {
      if (typeof t4 != "string" || t4.length === 0)
        throw Error(s(20, false));
      if (!n2)
        throw Error(s(23, false));
      if (typeof e4 != "function")
        throw Error(s(24, false));
      if (!St(r4))
        throw Error(s(22, false));
    }(t3, e3, r3, o3), u2.name = t3, u2.loadApp = e3, u2.activeWhen = r3, u2.customProps = o3), u2.loadApp = typeof (i3 = u2.loadApp) != "function" ? function() {
      return Promise.resolve(i3);
    } : i3, u2.customProps = function(t4) {
      return t4 || {};
    }(u2.customProps), u2.activeWhen = function(t4) {
      var n2 = Array.isArray(t4) ? t4 : [t4];
      return n2 = n2.map(function(t5) {
        return typeof t5 == "function" ? t5 : _t(t5);
      }), function(t5) {
        return n2.some(function(n3) {
          return n3(t5);
        });
      };
    }(u2.activeWhen), u2;
  }(t2, e2, r2, o2);
  if (yt().indexOf(i2.name) !== -1)
    throw Error(s(21, false, i2.name));
  wt.push(S({ loadErrorTime: null, status: l, parcels: {}, devtools: { overlays: { options: {}, selectors: [] } } }, i2)), Y && (ft(), Lt());
}
function bt() {
  var t2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.location;
  return wt.filter(function(n2) {
    return n2.activeWhen(t2);
  }).map(T);
}
function Tt(t2) {
  if (wt.filter(function(n2) {
    return T(n2) === t2;
  }).length === 0)
    throw Error(s(25, false, t2));
  return At(t2).then(function() {
    var n2 = wt.map(T).indexOf(t2);
    wt.splice(n2, 1);
  });
}
function At(t2) {
  var n2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : { waitForUnmount: false };
  if (typeof t2 != "string")
    throw Error(s(26, false));
  var e2 = _(wt, function(n3) {
    return T(n3) === t2;
  });
  if (!e2)
    throw Error(s(27, false, t2));
  var r2, o2 = dt(T(e2));
  if (n2 && n2.waitForUnmount) {
    if (o2)
      return o2.promise;
    var i2 = new Promise(function(t3, n3) {
      vt(e2, function() {
        return i2;
      }, t3, n3);
    });
    return i2;
  }
  return o2 ? (r2 = o2.promise, Nt(e2, o2.resolve, o2.reject)) : r2 = new Promise(function(t3, n3) {
    vt(e2, function() {
      return r2;
    }, t3, n3), Nt(e2, t3, n3);
  }), r2;
}
function Nt(t2, n2, e2) {
  L(t2).then(ht).then(function() {
    n2(), setTimeout(function() {
      Lt();
    });
  }).catch(e2);
}
function St(t2) {
  return !t2 || typeof t2 == "function" || n(t2) === "object" && t2 !== null && !Array.isArray(t2);
}
function _t(t2, n2) {
  var e2 = function(t3, n3) {
    var e3 = 0, r2 = false, o2 = "^";
    t3[0] !== "/" && (t3 = "/" + t3);
    for (var i2 = 0; i2 < t3.length; i2++) {
      var u2 = t3[i2];
      (!r2 && u2 === ":" || r2 && u2 === "/") && a2(i2);
    }
    return a2(t3.length), new RegExp(o2, "i");
    function a2(i3) {
      var u3 = t3.slice(e3, i3).replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
      if (o2 += r2 ? "[^/]+/?" : u3, i3 === t3.length)
        if (r2)
          n3 && (o2 += "$");
        else {
          var a3 = n3 ? "" : ".*";
          o2 = o2.charAt(o2.length - 1) === "/" ? "".concat(o2).concat(a3, "$") : "".concat(o2, "(/").concat(a3, ")?(#.*)?$");
        }
      r2 = !r2, e3 = i3;
    }
  }(t2, n2);
  return function(t3) {
    var n3 = t3.origin;
    n3 || (n3 = "".concat(t3.protocol, "//").concat(t3.host));
    var r2 = t3.href.replace(n3, "").replace(t3.search, "").split("?")[0];
    return e2.test(r2);
  };
}
var Dt = false;
var Ut = [];
var jt = Y && window.location.href;
function Mt() {
  return Lt();
}
function Lt() {
  var t2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], n2 = arguments.length > 1 ? arguments[1] : void 0;
  if (Dt)
    return new Promise(function(t3, e2) {
      Ut.push({ resolve: t3, reject: e2, eventArguments: n2 });
    });
  var r2, i2 = gt(), u2 = i2.appsToUnload, a2 = i2.appsToUnmount, c2 = i2.appsToLoad, s2 = i2.appsToMount, f2 = false, p2 = jt, h2 = jt = window.location.href;
  return Bt() ? (Dt = true, r2 = u2.concat(c2, a2, s2), g2()) : (r2 = c2, d2());
  function m2() {
    f2 = true;
  }
  function d2() {
    return Promise.resolve().then(function() {
      var t3 = c2.map(z);
      return Promise.all(t3).then(y2).then(function() {
        return [];
      }).catch(function(t4) {
        throw y2(), t4;
      });
    });
  }
  function g2() {
    return Promise.resolve().then(function() {
      if (window.dispatchEvent(new o(r2.length === 0 ? "single-spa:before-no-app-change" : "single-spa:before-app-change", O2(true))), window.dispatchEvent(new o("single-spa:before-routing-event", O2(true, { cancelNavigation: m2 }))), f2)
        return window.dispatchEvent(new o("single-spa:before-mount-routing-event", O2(true))), E2(), void nt(p2);
      var n3 = u2.map(ht), e2 = a2.map(L).map(function(t3) {
        return t3.then(ht);
      }).concat(n3), i3 = Promise.all(e2);
      i3.then(function() {
        window.dispatchEvent(new o("single-spa:before-mount-routing-event", O2(true)));
      });
      var l2 = c2.map(function(t3) {
        return z(t3).then(function(t4) {
          return Rt(t4, i3);
        });
      }), h3 = s2.filter(function(t3) {
        return c2.indexOf(t3) < 0;
      }).map(function(t3) {
        return Rt(t3, i3);
      });
      return i3.catch(function(t3) {
        throw y2(), t3;
      }).then(function() {
        return y2(), Promise.all(l2.concat(h3)).catch(function(n4) {
          throw t2.forEach(function(t3) {
            return t3.reject(n4);
          }), n4;
        }).then(E2);
      });
    });
  }
  function E2() {
    var n3 = Et();
    t2.forEach(function(t3) {
      return t3.resolve(n3);
    });
    try {
      var e2 = r2.length === 0 ? "single-spa:no-app-change" : "single-spa:app-change";
      window.dispatchEvent(new o(e2, O2())), window.dispatchEvent(new o("single-spa:routing-event", O2()));
    } catch (t3) {
      setTimeout(function() {
        throw t3;
      });
    }
    if (Dt = false, Ut.length > 0) {
      var i3 = Ut;
      Ut = [], Lt(i3);
    }
    return n3;
  }
  function y2() {
    t2.forEach(function(t3) {
      et(t3.eventArguments);
    }), et(n2);
  }
  function O2() {
    var t3, o2 = arguments.length > 0 && arguments[0] !== void 0 && arguments[0], i3 = arguments.length > 1 ? arguments[1] : void 0, m3 = {}, d3 = (e(t3 = {}, w, []), e(t3, v, []), e(t3, l, []), e(t3, P, []), t3);
    o2 ? (c2.concat(s2).forEach(function(t4, n3) {
      E3(t4, w);
    }), u2.forEach(function(t4) {
      E3(t4, l);
    }), a2.forEach(function(t4) {
      E3(t4, v);
    })) : r2.forEach(function(t4) {
      E3(t4);
    });
    var g3 = { detail: { newAppStatuses: m3, appsByNewStatus: d3, totalAppChanges: r2.length, originalEvent: n2 == null ? void 0 : n2[0], oldUrl: p2, newUrl: h2, navigationIsCanceled: f2 } };
    return i3 && S(g3.detail, i3), g3;
    function E3(t4, n3) {
      var e2 = T(t4);
      n3 = n3 || Pt(e2), m3[e2] = n3, (d3[n3] = d3[n3] || []).push(e2);
    }
  }
}
function Rt(t2, n2) {
  return b(t2) ? M(t2).then(function(t3) {
    return n2.then(function() {
      return b(t3) ? x(t3) : t3;
    });
  }) : n2.then(function() {
    return t2;
  });
}
var It = false;
function xt(t2) {
  var n2;
  It = true, t2 && t2.urlRerouteOnly && (n2 = t2.urlRerouteOnly, X = n2), Y && Lt();
}
function Bt() {
  return It;
}
Y && setTimeout(function() {
  It || console.warn(s(1, false));
}, 5e3);
var Gt = { getRawAppData: function() {
  return [].concat(wt);
}, reroute: Lt, NOT_LOADED: l, toLoadPromise: z, toBootstrapPromise: M, unregisterApplication: Tt };
Y && window.__SINGLE_SPA_DEVTOOLS__ && (window.__SINGLE_SPA_DEVTOOLS__.exposedMethods = Gt);

// node_modules/qiankun/es/loader.js
var import_concat2 = __toESM(require_concat());
var import_mergeWith2 = __toESM(require_mergeWith());
var import_forEach = __toESM(require_forEach());
var import_regenerator4 = __toESM(require_regenerator());

// node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}

// node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(arr, i2) {
  var _i = arr == null ? null : typeof Symbol != "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, i2 === 0) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i2); _n = true) {
          ;
        }
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null && (_r = _i["return"](), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}

// node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
}

// node_modules/import-html-entry/esm/utils.js
var isIE11 = typeof navigator !== "undefined" && navigator.userAgent.indexOf("Trident") !== -1;
function shouldSkipProperty(global2, p2) {
  if (!global2.hasOwnProperty(p2) || !isNaN(p2) && p2 < global2.length)
    return true;
  if (isIE11) {
    try {
      return global2[p2] && typeof window !== "undefined" && global2[p2].parent === window;
    } catch (err) {
      return true;
    }
  } else {
    return false;
  }
}
var firstGlobalProp;
var secondGlobalProp;
var lastGlobalProp;
function getGlobalProp(global2) {
  var cnt = 0;
  var lastProp;
  var hasIframe = false;
  for (var p2 in global2) {
    if (shouldSkipProperty(global2, p2))
      continue;
    for (var i2 = 0; i2 < window.frames.length && !hasIframe; i2++) {
      var frame = window.frames[i2];
      if (frame === global2[p2]) {
        hasIframe = true;
        break;
      }
    }
    if (!hasIframe && (cnt === 0 && p2 !== firstGlobalProp || cnt === 1 && p2 !== secondGlobalProp))
      return p2;
    cnt++;
    lastProp = p2;
  }
  if (lastProp !== lastGlobalProp)
    return lastProp;
}
function noteGlobalProps(global2) {
  firstGlobalProp = secondGlobalProp = void 0;
  for (var p2 in global2) {
    if (shouldSkipProperty(global2, p2))
      continue;
    if (!firstGlobalProp)
      firstGlobalProp = p2;
    else if (!secondGlobalProp)
      secondGlobalProp = p2;
    lastGlobalProp = p2;
  }
  return lastGlobalProp;
}
function getInlineCode(match) {
  var start2 = match.indexOf(">") + 1;
  var end = match.lastIndexOf("<");
  return match.substring(start2, end);
}
function defaultGetPublicPath(entry) {
  if (_typeof(entry) === "object") {
    return "/";
  }
  try {
    var _URL = new URL(entry, location.href), origin = _URL.origin, pathname = _URL.pathname;
    var paths = pathname.split("/");
    paths.pop();
    return "".concat(origin).concat(paths.join("/"), "/");
  } catch (e2) {
    console.warn(e2);
    return "";
  }
}
function isModuleScriptSupported() {
  var s2 = document.createElement("script");
  return "noModule" in s2;
}
var requestIdleCallback = window.requestIdleCallback || function requestIdleCallback2(cb) {
  var start2 = Date.now();
  return setTimeout(function() {
    cb({
      didTimeout: false,
      timeRemaining: function timeRemaining() {
        return Math.max(0, 50 - (Date.now() - start2));
      }
    });
  }, 1);
};
function readResAsString(response, autoDetectCharset) {
  if (!autoDetectCharset) {
    return response.text();
  }
  if (!response.headers) {
    return response.text();
  }
  var contentType = response.headers.get("Content-Type");
  if (!contentType) {
    return response.text();
  }
  var charset = "utf-8";
  var parts = contentType.split(";");
  if (parts.length === 2) {
    var _parts$1$split = parts[1].split("="), _parts$1$split2 = _slicedToArray(_parts$1$split, 2), value = _parts$1$split2[1];
    var encoding = value && value.trim();
    if (encoding) {
      charset = encoding;
    }
  }
  if (charset.toUpperCase() === "UTF-8") {
    return response.text();
  }
  return response.blob().then(function(file) {
    return new Promise(function(resolve, reject) {
      var reader = new window.FileReader();
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = reject;
      reader.readAsText(file, charset);
    });
  });
}
var evalCache = {};
function evalCode(scriptSrc, code) {
  var key = scriptSrc;
  if (!evalCache[key]) {
    var functionWrappedCode = "(function(){".concat(code, "})");
    evalCache[key] = (0, eval)(functionWrappedCode);
  }
  var evalFunc = evalCache[key];
  evalFunc.call(window);
}

// node_modules/import-html-entry/esm/process-tpl.js
var ALL_SCRIPT_REGEX = /(<script[\s\S]*?>)[\s\S]*?<\/script>/gi;
var SCRIPT_TAG_REGEX = /<(script)\s+((?!type=('|")text\/ng\x2Dtemplate\3)[\s\S])*?>[\s\S]*?<\/\1>/i;
var SCRIPT_SRC_REGEX = /.*\ssrc=('|")?([^>'"\s]+)/;
var SCRIPT_TYPE_REGEX = /.*\stype=('|")?([^>'"\s]+)/;
var SCRIPT_ENTRY_REGEX = /.*\sentry\s*.*/;
var SCRIPT_ASYNC_REGEX = /.*\sasync\s*.*/;
var SCRIPT_NO_MODULE_REGEX = /.*\snomodule\s*.*/;
var SCRIPT_MODULE_REGEX = /.*\stype=('|")?module('|")?\s*.*/;
var LINK_TAG_REGEX = /<(link)\s+[\s\S]*?>/ig;
var LINK_PRELOAD_OR_PREFETCH_REGEX = /\srel=('|")?(preload|prefetch)\1/;
var LINK_HREF_REGEX = /.*\shref=('|")?([^>'"\s]+)/;
var LINK_AS_FONT = /.*\sas=('|")?font\1.*/;
var STYLE_TAG_REGEX = /<style[^>]*>[\s\S]*?<\/style>/gi;
var STYLE_TYPE_REGEX = /\s+rel=('|")?stylesheet\1.*/;
var STYLE_HREF_REGEX = /.*\shref=('|")?([^>'"\s]+)/;
var HTML_COMMENT_REGEX = /<!--([\s\S]*?)-->/g;
var LINK_IGNORE_REGEX = /<link(\s+|\s+[\s\S]+\s+)ignore(\s*|\s+[\s\S]*|=[\s\S]*)>/i;
var STYLE_IGNORE_REGEX = /<style(\s+|\s+[\s\S]+\s+)ignore(\s*|\s+[\s\S]*|=[\s\S]*)>/i;
var SCRIPT_IGNORE_REGEX = /<script(\s+|\s+[\s\S]+\s+)ignore(\s*|\s+[\s\S]*|=[\s\S]*)>/i;
function hasProtocol(url) {
  return url.startsWith("//") || url.startsWith("http://") || url.startsWith("https://");
}
function getEntirePath(path, baseURI) {
  return new URL(path, baseURI).toString();
}
function isValidJavaScriptType(type) {
  var handleTypes = ["text/javascript", "module", "application/javascript", "text/ecmascript", "application/ecmascript"];
  return !type || handleTypes.indexOf(type) !== -1;
}
var genLinkReplaceSymbol = function genLinkReplaceSymbol2(linkHref) {
  var preloadOrPrefetch = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  return "<!-- ".concat(preloadOrPrefetch ? "prefetch/preload" : "", " link ").concat(linkHref, " replaced by import-html-entry -->");
};
var genScriptReplaceSymbol = function genScriptReplaceSymbol2(scriptSrc) {
  var async = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  return "<!-- ".concat(async ? "async" : "", " script ").concat(scriptSrc, " replaced by import-html-entry -->");
};
var inlineScriptReplaceSymbol = "<!-- inline scripts replaced by import-html-entry -->";
var genIgnoreAssetReplaceSymbol = function genIgnoreAssetReplaceSymbol2(url) {
  return "<!-- ignore asset ".concat(url || "file", " replaced by import-html-entry -->");
};
var genModuleScriptReplaceSymbol = function genModuleScriptReplaceSymbol2(scriptSrc, moduleSupport) {
  return "<!-- ".concat(moduleSupport ? "nomodule" : "module", " script ").concat(scriptSrc, " ignored by import-html-entry -->");
};
function processTpl(tpl, baseURI, postProcessTemplate) {
  var scripts = [];
  var styles = [];
  var entry = null;
  var moduleSupport = isModuleScriptSupported();
  var template = tpl.replace(HTML_COMMENT_REGEX, "").replace(LINK_TAG_REGEX, function(match) {
    var styleType = !!match.match(STYLE_TYPE_REGEX);
    if (styleType) {
      var styleHref = match.match(STYLE_HREF_REGEX);
      var styleIgnore = match.match(LINK_IGNORE_REGEX);
      if (styleHref) {
        var href = styleHref && styleHref[2];
        var newHref = href;
        if (href && !hasProtocol(href)) {
          newHref = getEntirePath(href, baseURI);
        }
        if (styleIgnore) {
          return genIgnoreAssetReplaceSymbol(newHref);
        }
        styles.push(newHref);
        return genLinkReplaceSymbol(newHref);
      }
    }
    var preloadOrPrefetchType = match.match(LINK_PRELOAD_OR_PREFETCH_REGEX) && match.match(LINK_HREF_REGEX) && !match.match(LINK_AS_FONT);
    if (preloadOrPrefetchType) {
      var _match$match = match.match(LINK_HREF_REGEX), _match$match2 = _slicedToArray(_match$match, 3), linkHref = _match$match2[2];
      return genLinkReplaceSymbol(linkHref, true);
    }
    return match;
  }).replace(STYLE_TAG_REGEX, function(match) {
    if (STYLE_IGNORE_REGEX.test(match)) {
      return genIgnoreAssetReplaceSymbol("style file");
    }
    return match;
  }).replace(ALL_SCRIPT_REGEX, function(match, scriptTag) {
    var scriptIgnore = scriptTag.match(SCRIPT_IGNORE_REGEX);
    var moduleScriptIgnore = moduleSupport && !!scriptTag.match(SCRIPT_NO_MODULE_REGEX) || !moduleSupport && !!scriptTag.match(SCRIPT_MODULE_REGEX);
    var matchedScriptTypeMatch = scriptTag.match(SCRIPT_TYPE_REGEX);
    var matchedScriptType = matchedScriptTypeMatch && matchedScriptTypeMatch[2];
    if (!isValidJavaScriptType(matchedScriptType)) {
      return match;
    }
    if (SCRIPT_TAG_REGEX.test(match) && scriptTag.match(SCRIPT_SRC_REGEX)) {
      var matchedScriptEntry = scriptTag.match(SCRIPT_ENTRY_REGEX);
      var matchedScriptSrcMatch = scriptTag.match(SCRIPT_SRC_REGEX);
      var matchedScriptSrc = matchedScriptSrcMatch && matchedScriptSrcMatch[2];
      if (entry && matchedScriptEntry) {
        throw new SyntaxError("You should not set multiply entry script!");
      } else {
        if (matchedScriptSrc && !hasProtocol(matchedScriptSrc)) {
          matchedScriptSrc = getEntirePath(matchedScriptSrc, baseURI);
        }
        entry = entry || matchedScriptEntry && matchedScriptSrc;
      }
      if (scriptIgnore) {
        return genIgnoreAssetReplaceSymbol(matchedScriptSrc || "js file");
      }
      if (moduleScriptIgnore) {
        return genModuleScriptReplaceSymbol(matchedScriptSrc || "js file", moduleSupport);
      }
      if (matchedScriptSrc) {
        var asyncScript = !!scriptTag.match(SCRIPT_ASYNC_REGEX);
        scripts.push(asyncScript ? {
          async: true,
          src: matchedScriptSrc
        } : matchedScriptSrc);
        return genScriptReplaceSymbol(matchedScriptSrc, asyncScript);
      }
      return match;
    } else {
      if (scriptIgnore) {
        return genIgnoreAssetReplaceSymbol("js file");
      }
      if (moduleScriptIgnore) {
        return genModuleScriptReplaceSymbol("js file", moduleSupport);
      }
      var code = getInlineCode(match);
      var isPureCommentBlock = code.split(/[\r\n]+/).every(function(line) {
        return !line.trim() || line.trim().startsWith("//");
      });
      if (!isPureCommentBlock) {
        scripts.push(match);
      }
      return inlineScriptReplaceSymbol;
    }
  });
  scripts = scripts.filter(function(script) {
    return !!script;
  });
  var tplResult = {
    template,
    scripts,
    styles,
    entry: entry || scripts[scripts.length - 1]
  };
  if (typeof postProcessTemplate === "function") {
    tplResult = postProcessTemplate(tplResult);
  }
  return tplResult;
}

// node_modules/import-html-entry/esm/index.js
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    i2 % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var styleCache = {};
var scriptCache = {};
var embedHTMLCache = {};
if (!window.fetch) {
  throw new Error('[import-html-entry] Here is no "fetch" on the window env, you need to polyfill it');
}
var defaultFetch = window.fetch.bind(window);
function defaultGetTemplate(tpl) {
  return tpl;
}
function getEmbedHTML(template, styles) {
  var opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var _opts$fetch = opts.fetch, fetch2 = _opts$fetch === void 0 ? defaultFetch : _opts$fetch;
  var embedHTML = template;
  return _getExternalStyleSheets(styles, fetch2).then(function(styleSheets) {
    embedHTML = styles.reduce(function(html, styleSrc, i2) {
      html = html.replace(genLinkReplaceSymbol(styleSrc), isInlineCode(styleSrc) ? "".concat(styleSrc) : "<style>/* ".concat(styleSrc, " */").concat(styleSheets[i2], "</style>"));
      return html;
    }, embedHTML);
    return embedHTML;
  });
}
var isInlineCode = function isInlineCode2(code) {
  return code.startsWith("<");
};
function getExecutableScript(scriptSrc, scriptText) {
  var opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var proxy = opts.proxy, strictGlobal = opts.strictGlobal, _opts$scopedGlobalVar = opts.scopedGlobalVariables, scopedGlobalVariables = _opts$scopedGlobalVar === void 0 ? [] : _opts$scopedGlobalVar;
  var sourceUrl = isInlineCode(scriptSrc) ? "" : "//# sourceURL=".concat(scriptSrc, "\n");
  var scopedGlobalVariableFnParameters = scopedGlobalVariables.length ? scopedGlobalVariables.join(",") : "";
  var globalWindow = (0, eval)("window");
  globalWindow.proxy = proxy;
  return strictGlobal ? scopedGlobalVariableFnParameters ? ";(function(){with(window.proxy){(function(".concat(scopedGlobalVariableFnParameters, "){;").concat(scriptText, "\n").concat(sourceUrl, "}).bind(window.proxy)(").concat(scopedGlobalVariableFnParameters, ")}})();") : ";(function(window, self, globalThis){with(window){;".concat(scriptText, "\n").concat(sourceUrl, "}}).bind(window.proxy)(window.proxy, window.proxy, window.proxy);") : ";(function(window, self, globalThis){;".concat(scriptText, "\n").concat(sourceUrl, "}).bind(window.proxy)(window.proxy, window.proxy, window.proxy);");
}
function _getExternalStyleSheets(styles) {
  var fetch2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultFetch;
  return Promise.all(styles.map(function(styleLink) {
    if (isInlineCode(styleLink)) {
      return getInlineCode(styleLink);
    } else {
      return styleCache[styleLink] || (styleCache[styleLink] = fetch2(styleLink).then(function(response) {
        return response.text();
      }));
    }
  }));
}
function _getExternalScripts(scripts) {
  var fetch2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultFetch;
  var errorCallback = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
  };
  var fetchScript = function fetchScript2(scriptUrl) {
    return scriptCache[scriptUrl] || (scriptCache[scriptUrl] = fetch2(scriptUrl).then(function(response) {
      if (response.status >= 400) {
        errorCallback();
        throw new Error("".concat(scriptUrl, " load failed with status ").concat(response.status));
      }
      return response.text();
    })["catch"](function(e2) {
      errorCallback();
      throw e2;
    }));
  };
  return Promise.all(scripts.map(function(script) {
    if (typeof script === "string") {
      if (isInlineCode(script)) {
        return getInlineCode(script);
      } else {
        return fetchScript(script);
      }
    } else {
      var src = script.src, async = script.async;
      if (async) {
        return {
          src,
          async: true,
          content: new Promise(function(resolve, reject) {
            return requestIdleCallback(function() {
              return fetchScript(src).then(resolve, reject);
            });
          })
        };
      }
      return fetchScript(src);
    }
  }));
}
function throwNonBlockingError(error, msg) {
  setTimeout(function() {
    console.error(msg);
    throw error;
  });
}
var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
function _execScripts(entry, scripts) {
  var proxy = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : window;
  var opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  var _opts$fetch2 = opts.fetch, fetch2 = _opts$fetch2 === void 0 ? defaultFetch : _opts$fetch2, _opts$strictGlobal = opts.strictGlobal, strictGlobal = _opts$strictGlobal === void 0 ? false : _opts$strictGlobal, success = opts.success, _opts$error = opts.error, error = _opts$error === void 0 ? function() {
  } : _opts$error, _opts$beforeExec = opts.beforeExec, beforeExec = _opts$beforeExec === void 0 ? function() {
  } : _opts$beforeExec, _opts$afterExec = opts.afterExec, afterExec = _opts$afterExec === void 0 ? function() {
  } : _opts$afterExec, _opts$scopedGlobalVar2 = opts.scopedGlobalVariables, scopedGlobalVariables = _opts$scopedGlobalVar2 === void 0 ? [] : _opts$scopedGlobalVar2;
  return _getExternalScripts(scripts, fetch2, error).then(function(scriptsText) {
    var geval = function geval2(scriptSrc, inlineScript) {
      var rawCode = beforeExec(inlineScript, scriptSrc) || inlineScript;
      var code = getExecutableScript(scriptSrc, rawCode, {
        proxy,
        strictGlobal,
        scopedGlobalVariables
      });
      evalCode(scriptSrc, code);
      afterExec(inlineScript, scriptSrc);
    };
    function exec(scriptSrc, inlineScript, resolve) {
      var markName = "Evaluating script ".concat(scriptSrc);
      var measureName = "Evaluating Time Consuming: ".concat(scriptSrc);
      if (supportsUserTiming) {
        performance.mark(markName);
      }
      if (scriptSrc === entry) {
        noteGlobalProps(strictGlobal ? proxy : window);
        try {
          geval(scriptSrc, inlineScript);
          var exports = proxy[getGlobalProp(strictGlobal ? proxy : window)] || {};
          resolve(exports);
        } catch (e2) {
          console.error("[import-html-entry]: error occurs while executing entry script ".concat(scriptSrc));
          throw e2;
        }
      } else {
        if (typeof inlineScript === "string") {
          try {
            geval(scriptSrc, inlineScript);
          } catch (e2) {
            throwNonBlockingError(e2, "[import-html-entry]: error occurs while executing normal script ".concat(scriptSrc));
          }
        } else {
          inlineScript.async && (inlineScript === null || inlineScript === void 0 ? void 0 : inlineScript.content.then(function(downloadedScriptText) {
            return geval(inlineScript.src, downloadedScriptText);
          })["catch"](function(e2) {
            throwNonBlockingError(e2, "[import-html-entry]: error occurs while executing async script ".concat(inlineScript.src));
          }));
        }
      }
      if (supportsUserTiming) {
        performance.measure(measureName, markName);
        performance.clearMarks(markName);
        performance.clearMeasures(measureName);
      }
    }
    function schedule(i2, resolvePromise) {
      if (i2 < scripts.length) {
        var scriptSrc = scripts[i2];
        var inlineScript = scriptsText[i2];
        exec(scriptSrc, inlineScript, resolvePromise);
        if (!entry && i2 === scripts.length - 1) {
          resolvePromise();
        } else {
          schedule(i2 + 1, resolvePromise);
        }
      }
    }
    return new Promise(function(resolve) {
      return schedule(0, success || resolve);
    });
  });
}
function importHTML(url) {
  var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var fetch2 = defaultFetch;
  var autoDecodeResponse = false;
  var getPublicPath = defaultGetPublicPath;
  var getTemplate = defaultGetTemplate;
  var postProcessTemplate = opts.postProcessTemplate;
  if (typeof opts === "function") {
    fetch2 = opts;
  } else {
    if (opts.fetch) {
      if (typeof opts.fetch === "function") {
        fetch2 = opts.fetch;
      } else {
        fetch2 = opts.fetch.fn || defaultFetch;
        autoDecodeResponse = !!opts.fetch.autoDecodeResponse;
      }
    }
    getPublicPath = opts.getPublicPath || opts.getDomain || defaultGetPublicPath;
    getTemplate = opts.getTemplate || defaultGetTemplate;
  }
  return embedHTMLCache[url] || (embedHTMLCache[url] = fetch2(url).then(function(response) {
    return readResAsString(response, autoDecodeResponse);
  }).then(function(html) {
    var assetPublicPath = getPublicPath(url);
    var _processTpl = processTpl(getTemplate(html), assetPublicPath, postProcessTemplate), template = _processTpl.template, scripts = _processTpl.scripts, entry = _processTpl.entry, styles = _processTpl.styles;
    return getEmbedHTML(template, styles, {
      fetch: fetch2
    }).then(function(embedHTML) {
      return {
        template: embedHTML,
        assetPublicPath,
        getExternalScripts: function getExternalScripts() {
          return _getExternalScripts(scripts, fetch2);
        },
        getExternalStyleSheets: function getExternalStyleSheets() {
          return _getExternalStyleSheets(styles, fetch2);
        },
        execScripts: function execScripts(proxy, strictGlobal) {
          var opts2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          if (!scripts.length) {
            return Promise.resolve();
          }
          return _execScripts(entry, scripts, proxy, _objectSpread({
            fetch: fetch2,
            strictGlobal
          }, opts2));
        }
      };
    });
  }));
}
function importEntry(entry) {
  var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var _opts$fetch3 = opts.fetch, fetch2 = _opts$fetch3 === void 0 ? defaultFetch : _opts$fetch3, _opts$getTemplate = opts.getTemplate, getTemplate = _opts$getTemplate === void 0 ? defaultGetTemplate : _opts$getTemplate, postProcessTemplate = opts.postProcessTemplate;
  var getPublicPath = opts.getPublicPath || opts.getDomain || defaultGetPublicPath;
  if (!entry) {
    throw new SyntaxError("entry should not be empty!");
  }
  if (typeof entry === "string") {
    return importHTML(entry, {
      fetch: fetch2,
      getPublicPath,
      getTemplate,
      postProcessTemplate
    });
  }
  if (Array.isArray(entry.scripts) || Array.isArray(entry.styles)) {
    var _entry$scripts = entry.scripts, scripts = _entry$scripts === void 0 ? [] : _entry$scripts, _entry$styles = entry.styles, styles = _entry$styles === void 0 ? [] : _entry$styles, _entry$html = entry.html, html = _entry$html === void 0 ? "" : _entry$html;
    var getHTMLWithStylePlaceholder = function getHTMLWithStylePlaceholder2(tpl) {
      return styles.reduceRight(function(html2, styleSrc) {
        return "".concat(genLinkReplaceSymbol(styleSrc)).concat(html2);
      }, tpl);
    };
    var getHTMLWithScriptPlaceholder = function getHTMLWithScriptPlaceholder2(tpl) {
      return scripts.reduce(function(html2, scriptSrc) {
        return "".concat(html2).concat(genScriptReplaceSymbol(scriptSrc));
      }, tpl);
    };
    return getEmbedHTML(getTemplate(getHTMLWithScriptPlaceholder(getHTMLWithStylePlaceholder(html))), styles, {
      fetch: fetch2
    }).then(function(embedHTML) {
      return {
        template: embedHTML,
        assetPublicPath: getPublicPath(entry),
        getExternalScripts: function getExternalScripts() {
          return _getExternalScripts(scripts, fetch2);
        },
        getExternalStyleSheets: function getExternalStyleSheets() {
          return _getExternalStyleSheets(styles, fetch2);
        },
        execScripts: function execScripts(proxy, strictGlobal) {
          var opts2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          if (!scripts.length) {
            return Promise.resolve();
          }
          return _execScripts(scripts[scripts.length - 1], scripts, proxy, _objectSpread({
            fetch: fetch2,
            strictGlobal
          }, opts2));
        }
      };
    });
  } else {
    throw new SyntaxError("entry scripts or styles should be array!");
  }
}

// node_modules/qiankun/es/addons/index.js
var import_concat = __toESM(require_concat());
var import_mergeWith = __toESM(require_mergeWith());

// node_modules/qiankun/es/addons/engineFlag.js
var import_regenerator = __toESM(require_regenerator());
function getAddOn(global2) {
  return {
    beforeLoad: function beforeLoad() {
      return _asyncToGenerator(import_regenerator.default.mark(function _callee() {
        return import_regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                global2.__POWERED_BY_QIANKUN__ = true;
              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    beforeMount: function beforeMount() {
      return _asyncToGenerator(import_regenerator.default.mark(function _callee2() {
        return import_regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                global2.__POWERED_BY_QIANKUN__ = true;
              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },
    beforeUnmount: function beforeUnmount() {
      return _asyncToGenerator(import_regenerator.default.mark(function _callee3() {
        return import_regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                delete global2.__POWERED_BY_QIANKUN__;
              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    }
  };
}

// node_modules/qiankun/es/addons/runtimePublicPath.js
var import_regenerator2 = __toESM(require_regenerator());
var rawPublicPath = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;
function getAddOn2(global2) {
  var publicPath = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "/";
  var hasMountedOnce = false;
  return {
    beforeLoad: function beforeLoad() {
      return _asyncToGenerator(import_regenerator2.default.mark(function _callee() {
        return import_regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                global2.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ = publicPath;
              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    beforeMount: function beforeMount() {
      return _asyncToGenerator(import_regenerator2.default.mark(function _callee2() {
        return import_regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (hasMountedOnce) {
                  global2.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ = publicPath;
                }
              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },
    beforeUnmount: function beforeUnmount() {
      return _asyncToGenerator(import_regenerator2.default.mark(function _callee3() {
        return import_regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (rawPublicPath === void 0) {
                  delete global2.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;
                } else {
                  global2.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ = rawPublicPath;
                }
                hasMountedOnce = true;
              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    }
  };
}

// node_modules/qiankun/es/addons/index.js
function getAddOns(global2, publicPath) {
  return (0, import_mergeWith.default)({}, getAddOn(global2), getAddOn2(global2, publicPath), function(v1, v2) {
    return (0, import_concat.default)(v1 !== null && v1 !== void 0 ? v1 : [], v2 !== null && v2 !== void 0 ? v2 : []);
  });
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o2, p2) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf(o2, p2);
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o2) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
    return o3.__proto__ || Object.getPrototypeOf(o3);
  };
  return _getPrototypeOf(o2);
}

// node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}

// node_modules/@babel/runtime/helpers/esm/createSuper.js
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

// node_modules/@babel/runtime/helpers/esm/isNativeFunction.js
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

// node_modules/@babel/runtime/helpers/esm/construct.js
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a2 = [null];
      a2.push.apply(a2, args2);
      var Constructor = Function.bind.apply(Parent2, a2);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}

// node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}

// node_modules/qiankun/es/error.js
var QiankunError = function(_Error) {
  _inherits(QiankunError2, _Error);
  var _super = _createSuper(QiankunError2);
  function QiankunError2(message) {
    _classCallCheck(this, QiankunError2);
    return _super.call(this, "[qiankun]: ".concat(message));
  }
  return _createClass(QiankunError2);
}(_wrapNativeSuper(Error));

// node_modules/qiankun/es/globalState.js
var import_cloneDeep = __toESM(require_cloneDeep());
var globalState = {};
var deps = {};
function emitGlobal(state, prevState) {
  Object.keys(deps).forEach(function(id) {
    if (deps[id] instanceof Function) {
      deps[id]((0, import_cloneDeep.default)(state), (0, import_cloneDeep.default)(prevState));
    }
  });
}
function initGlobalState() {
  var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  if (true) {
    console.warn("[qiankun] globalState tools will be removed in 3.0, pls don't use it!");
  }
  if (state === globalState) {
    console.warn("[qiankun] state has not changed\uFF01");
  } else {
    var prevGlobalState = (0, import_cloneDeep.default)(globalState);
    globalState = (0, import_cloneDeep.default)(state);
    emitGlobal(globalState, prevGlobalState);
  }
  return getMicroAppStateActions("global-".concat(+new Date()), true);
}
function getMicroAppStateActions(id, isMaster) {
  return {
    onGlobalStateChange: function onGlobalStateChange(callback, fireImmediately) {
      if (!(callback instanceof Function)) {
        console.error("[qiankun] callback must be function!");
        return;
      }
      if (deps[id]) {
        console.warn("[qiankun] '".concat(id, "' global listener already exists before this, new listener will overwrite it."));
      }
      deps[id] = callback;
      if (fireImmediately) {
        var cloneState = (0, import_cloneDeep.default)(globalState);
        callback(cloneState, cloneState);
      }
    },
    setGlobalState: function setGlobalState() {
      var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      if (state === globalState) {
        console.warn("[qiankun] state has not changed\uFF01");
        return false;
      }
      var changeKeys = [];
      var prevGlobalState = (0, import_cloneDeep.default)(globalState);
      globalState = (0, import_cloneDeep.default)(Object.keys(state).reduce(function(_globalState, changeKey) {
        if (isMaster || _globalState.hasOwnProperty(changeKey)) {
          changeKeys.push(changeKey);
          return Object.assign(_globalState, _defineProperty({}, changeKey, state[changeKey]));
        }
        console.warn("[qiankun] '".concat(changeKey, "' not declared when init state\uFF01"));
        return _globalState;
      }, globalState));
      if (changeKeys.length === 0) {
        console.warn("[qiankun] state has not changed\uFF01");
        return false;
      }
      emitGlobal(globalState, prevGlobalState);
      return true;
    },
    offGlobalStateChange: function offGlobalStateChange() {
      delete deps[id];
      return true;
    }
  };
}

// node_modules/qiankun/es/sandbox/index.js
var import_regenerator3 = __toESM(require_regenerator());

// node_modules/qiankun/es/interfaces.js
var SandBoxType;
(function(SandBoxType2) {
  SandBoxType2["Proxy"] = "Proxy";
  SandBoxType2["Snapshot"] = "Snapshot";
  SandBoxType2["LegacyProxy"] = "LegacyProxy";
})(SandBoxType || (SandBoxType = {}));

// node_modules/qiankun/es/sandbox/common.js
var import_without = __toESM(require_without());

// node_modules/qiankun/es/utils.js
var import_isFunction = __toESM(require_isFunction());
var import_once = __toESM(require_once());
var import_snakeCase = __toESM(require_snakeCase());

// node_modules/qiankun/es/version.js
var version = "2.8.4";

// node_modules/qiankun/es/utils.js
function toArray(array) {
  return Array.isArray(array) ? array : [array];
}
var nextTick = typeof window.Zone === "function" ? setTimeout : function(cb) {
  return Promise.resolve().then(cb);
};
var globalTaskPending = false;
function nextTask(cb) {
  if (!globalTaskPending) {
    globalTaskPending = true;
    nextTick(function() {
      cb();
      globalTaskPending = false;
    });
  }
}
var fnRegexCheckCacheMap = /* @__PURE__ */ new WeakMap();
function isConstructable(fn) {
  var hasPrototypeMethods = fn.prototype && fn.prototype.constructor === fn && Object.getOwnPropertyNames(fn.prototype).length > 1;
  if (hasPrototypeMethods)
    return true;
  if (fnRegexCheckCacheMap.has(fn)) {
    return fnRegexCheckCacheMap.get(fn);
  }
  var constructable = hasPrototypeMethods;
  if (!constructable) {
    var fnString = fn.toString();
    var constructableFunctionRegex = /^function\b\s[A-Z].*/;
    var classRegex = /^class\b/;
    constructable = constructableFunctionRegex.test(fnString) || classRegex.test(fnString);
  }
  fnRegexCheckCacheMap.set(fn, constructable);
  return constructable;
}
var naughtySafari = typeof document.all === "function" && typeof document.all === "undefined";
var callableFnCacheMap = /* @__PURE__ */ new WeakMap();
function isCallable(fn) {
  if (callableFnCacheMap.has(fn)) {
    return true;
  }
  var callable = naughtySafari ? typeof fn === "function" && typeof fn !== "undefined" : typeof fn === "function";
  if (callable) {
    callableFnCacheMap.set(fn, callable);
  }
  return callable;
}
var frozenPropertyCacheMap = /* @__PURE__ */ new WeakMap();
function isPropertyFrozen(target, p2) {
  if (!target || !p2) {
    return false;
  }
  var targetPropertiesFromCache = frozenPropertyCacheMap.get(target) || {};
  if (targetPropertiesFromCache[p2]) {
    return targetPropertiesFromCache[p2];
  }
  var propertyDescriptor = Object.getOwnPropertyDescriptor(target, p2);
  var frozen = Boolean(propertyDescriptor && propertyDescriptor.configurable === false && (propertyDescriptor.writable === false || propertyDescriptor.get && !propertyDescriptor.set));
  targetPropertiesFromCache[p2] = frozen;
  frozenPropertyCacheMap.set(target, targetPropertiesFromCache);
  return frozen;
}
var boundedMap = /* @__PURE__ */ new WeakMap();
function isBoundedFunction(fn) {
  if (boundedMap.has(fn)) {
    return boundedMap.get(fn);
  }
  var bounded = fn.name.indexOf("bound ") === 0 && !fn.hasOwnProperty("prototype");
  boundedMap.set(fn, bounded);
  return bounded;
}
var qiankunHeadTagName = "qiankun-head";
function getDefaultTplWrapper(name2) {
  return function(tpl) {
    var tplWithSimulatedHead;
    if (tpl.indexOf("<head>") !== -1) {
      tplWithSimulatedHead = tpl.replace("<head>", "<".concat(qiankunHeadTagName, ">")).replace("</head>", "</".concat(qiankunHeadTagName, ">"));
    } else {
      tplWithSimulatedHead = "<".concat(qiankunHeadTagName, "></").concat(qiankunHeadTagName, ">").concat(tpl);
    }
    return '<div id="'.concat(getWrapperId(name2), '" data-name="').concat(name2, '" data-version="').concat(version, '">').concat(tplWithSimulatedHead, "</div>");
  };
}
function getWrapperId(name2) {
  return "__qiankun_microapp_wrapper_for_".concat((0, import_snakeCase.default)(name2), "__");
}
var nativeGlobal = new Function("return this")();
var getGlobalAppInstanceMap = (0, import_once.default)(function() {
  if (!nativeGlobal.hasOwnProperty("__app_instance_name_map__")) {
    Object.defineProperty(nativeGlobal, "__app_instance_name_map__", {
      enumerable: false,
      configurable: true,
      writable: true,
      value: {}
    });
  }
  return nativeGlobal.__app_instance_name_map__;
});
var genAppInstanceIdByName = function genAppInstanceIdByName2(appName) {
  var globalAppInstanceMap = getGlobalAppInstanceMap();
  if (!(appName in globalAppInstanceMap)) {
    nativeGlobal.__app_instance_name_map__[appName] = 0;
    return appName;
  }
  globalAppInstanceMap[appName]++;
  return "".concat(appName, "_").concat(globalAppInstanceMap[appName]);
};
function validateExportLifecycle(exports) {
  var _ref = exports !== null && exports !== void 0 ? exports : {}, bootstrap = _ref.bootstrap, mount = _ref.mount, unmount = _ref.unmount;
  return (0, import_isFunction.default)(bootstrap) && (0, import_isFunction.default)(mount) && (0, import_isFunction.default)(unmount);
}
var Deferred = _createClass(function Deferred2() {
  var _this = this;
  _classCallCheck(this, Deferred2);
  this.promise = void 0;
  this.resolve = void 0;
  this.reject = void 0;
  this.promise = new Promise(function(resolve, reject) {
    _this.resolve = resolve;
    _this.reject = reject;
  });
});
var supportsUserTiming2 = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function" && typeof performance.getEntriesByName === "function";
function performanceGetEntriesByName(markName, type) {
  var marks = null;
  if (supportsUserTiming2) {
    marks = performance.getEntriesByName(markName, type);
  }
  return marks;
}
function performanceMark(markName) {
  if (supportsUserTiming2) {
    performance.mark(markName);
  }
}
function performanceMeasure(measureName, markName) {
  if (supportsUserTiming2 && performance.getEntriesByName(markName, "mark").length) {
    performance.measure(measureName, markName);
    performance.clearMarks(markName);
    performance.clearMeasures(measureName);
  }
}
function isEnableScopedCSS(sandbox) {
  if (_typeof(sandbox) !== "object") {
    return false;
  }
  if (sandbox.strictStyleIsolation) {
    return false;
  }
  return !!sandbox.experimentalStyleIsolation;
}
function getXPathForElement(el, document2) {
  if (!document2.body.contains(el)) {
    return void 0;
  }
  var xpath = "";
  var pos;
  var tmpEle;
  var element = el;
  while (element !== document2.documentElement) {
    pos = 0;
    tmpEle = element;
    while (tmpEle) {
      if (tmpEle.nodeType === 1 && tmpEle.nodeName === element.nodeName) {
        pos += 1;
      }
      tmpEle = tmpEle.previousSibling;
    }
    xpath = "*[name()='".concat(element.nodeName, "'][").concat(pos, "]/").concat(xpath);
    element = element.parentNode;
  }
  xpath = "/*[name()='".concat(document2.documentElement.nodeName, "']/").concat(xpath);
  xpath = xpath.replace(/\/$/, "");
  return xpath;
}
function getContainer(container) {
  return typeof container === "string" ? document.querySelector(container) : container;
}
function getContainerXPath(container) {
  if (container) {
    var containerElement = getContainer(container);
    if (containerElement) {
      return getXPathForElement(containerElement, document);
    }
  }
  return void 0;
}

// node_modules/qiankun/es/sandbox/globals.js
var globals = window.Proxy ? ["Array", "ArrayBuffer", "Boolean", "constructor", "DataView", "Date", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "Error", "escape", "eval", "EvalError", "Float32Array", "Float64Array", "Function", "hasOwnProperty", "Infinity", "Int16Array", "Int32Array", "Int8Array", "isFinite", "isNaN", "isPrototypeOf", "JSON", "Map", "Math", "NaN", "Number", "Object", "parseFloat", "parseInt", "Promise", "propertyIsEnumerable", "Proxy", "RangeError", "ReferenceError", "Reflect", "RegExp", "Set", "String", "Symbol", "SyntaxError", "toLocaleString", "toString", "TypeError", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray", "undefined", "unescape", "URIError", "valueOf", "WeakMap", "WeakSet"] : [];

// node_modules/qiankun/es/sandbox/common.js
var currentRunningApp = null;
function getCurrentRunningApp() {
  return currentRunningApp;
}
function setCurrentRunningApp(appInstance) {
  currentRunningApp = appInstance;
}
var spiedGlobals = ["window", "self", "globalThis", "top", "parent", "hasOwnProperty", "document", "eval"];
var trustedGlobals = [].concat(_toConsumableArray(import_without.default.apply(void 0, [globals].concat(spiedGlobals))), ["requestAnimationFrame"]);
var functionBoundedValueMap = /* @__PURE__ */ new WeakMap();
function getTargetValue(target, _value) {
  if (isCallable(_value) && !isBoundedFunction(_value) && !isConstructable(_value)) {
    var cachedBoundFunction = functionBoundedValueMap.get(_value);
    if (cachedBoundFunction) {
      return cachedBoundFunction;
    }
    var boundValue = Function.prototype.bind.call(_value, target);
    for (var key in _value) {
      boundValue[key] = _value[key];
    }
    if (_value.hasOwnProperty("prototype") && !boundValue.hasOwnProperty("prototype")) {
      Object.defineProperty(boundValue, "prototype", {
        value: _value.prototype,
        enumerable: false,
        writable: true
      });
    }
    if (typeof _value.toString === "function") {
      var valueHasInstanceToString = _value.hasOwnProperty("toString") && !boundValue.hasOwnProperty("toString");
      var boundValueHasPrototypeToString = boundValue.toString === Function.prototype.toString;
      if (valueHasInstanceToString || boundValueHasPrototypeToString) {
        var originToStringDescriptor = Object.getOwnPropertyDescriptor(valueHasInstanceToString ? _value : Function.prototype, "toString");
        Object.defineProperty(boundValue, "toString", _objectSpread2(_objectSpread2({}, originToStringDescriptor), (originToStringDescriptor === null || originToStringDescriptor === void 0 ? void 0 : originToStringDescriptor.get) ? null : {
          value: function value() {
            return _value.toString();
          }
        }));
      }
    }
    functionBoundedValueMap.set(_value, boundValue);
    return boundValue;
  }
  return _value;
}

// node_modules/qiankun/es/sandbox/legacy/sandbox.js
function isPropConfigurable(target, prop) {
  var descriptor = Object.getOwnPropertyDescriptor(target, prop);
  return descriptor ? descriptor.configurable : true;
}
var LegacySandbox = function() {
  function LegacySandbox2(name2) {
    var _this = this;
    var globalContext = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
    _classCallCheck(this, LegacySandbox2);
    this.addedPropsMapInSandbox = /* @__PURE__ */ new Map();
    this.modifiedPropsOriginalValueMapInSandbox = /* @__PURE__ */ new Map();
    this.currentUpdatedPropsValueMap = /* @__PURE__ */ new Map();
    this.name = void 0;
    this.proxy = void 0;
    this.globalContext = void 0;
    this.type = void 0;
    this.sandboxRunning = true;
    this.latestSetProp = null;
    this.name = name2;
    this.globalContext = globalContext;
    this.type = SandBoxType.LegacyProxy;
    var addedPropsMapInSandbox = this.addedPropsMapInSandbox, modifiedPropsOriginalValueMapInSandbox = this.modifiedPropsOriginalValueMapInSandbox, currentUpdatedPropsValueMap = this.currentUpdatedPropsValueMap;
    var rawWindow = globalContext;
    var fakeWindow = /* @__PURE__ */ Object.create(null);
    var setTrap = function setTrap2(p2, value, originalValue) {
      var sync2Window = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      if (_this.sandboxRunning) {
        if (!rawWindow.hasOwnProperty(p2)) {
          addedPropsMapInSandbox.set(p2, value);
        } else if (!modifiedPropsOriginalValueMapInSandbox.has(p2)) {
          modifiedPropsOriginalValueMapInSandbox.set(p2, originalValue);
        }
        currentUpdatedPropsValueMap.set(p2, value);
        if (sync2Window) {
          rawWindow[p2] = value;
        }
        _this.latestSetProp = p2;
        return true;
      }
      if (true) {
        console.warn("[qiankun] Set window.".concat(p2.toString(), " while sandbox destroyed or inactive in ").concat(name2, "!"));
      }
      return true;
    };
    var proxy = new Proxy(fakeWindow, {
      set: function set(_2, p2, value) {
        var originalValue = rawWindow[p2];
        return setTrap(p2, value, originalValue, true);
      },
      get: function get(_2, p2) {
        if (p2 === "top" || p2 === "parent" || p2 === "window" || p2 === "self") {
          return proxy;
        }
        var value = rawWindow[p2];
        return getTargetValue(rawWindow, value);
      },
      has: function has(_2, p2) {
        return p2 in rawWindow;
      },
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(_2, p2) {
        var descriptor = Object.getOwnPropertyDescriptor(rawWindow, p2);
        if (descriptor && !descriptor.configurable) {
          descriptor.configurable = true;
        }
        return descriptor;
      },
      defineProperty: function defineProperty(_2, p2, attributes) {
        var originalValue = rawWindow[p2];
        var done = Reflect.defineProperty(rawWindow, p2, attributes);
        var value = rawWindow[p2];
        setTrap(p2, value, originalValue, false);
        return done;
      }
    });
    this.proxy = proxy;
  }
  _createClass(LegacySandbox2, [{
    key: "setWindowProp",
    value: function setWindowProp(prop, value, toDelete) {
      if (value === void 0 && toDelete) {
        delete this.globalContext[prop];
      } else if (isPropConfigurable(this.globalContext, prop) && _typeof(prop) !== "symbol") {
        Object.defineProperty(this.globalContext, prop, {
          writable: true,
          configurable: true
        });
        this.globalContext[prop] = value;
      }
    }
  }, {
    key: "active",
    value: function active() {
      var _this2 = this;
      if (!this.sandboxRunning) {
        this.currentUpdatedPropsValueMap.forEach(function(v2, p2) {
          return _this2.setWindowProp(p2, v2);
        });
      }
      this.sandboxRunning = true;
    }
  }, {
    key: "inactive",
    value: function inactive() {
      var _this3 = this;
      if (true) {
        console.info("[qiankun:sandbox] ".concat(this.name, " modified global properties restore..."), [].concat(_toConsumableArray(this.addedPropsMapInSandbox.keys()), _toConsumableArray(this.modifiedPropsOriginalValueMapInSandbox.keys())));
      }
      this.modifiedPropsOriginalValueMapInSandbox.forEach(function(v2, p2) {
        return _this3.setWindowProp(p2, v2);
      });
      this.addedPropsMapInSandbox.forEach(function(_2, p2) {
        return _this3.setWindowProp(p2, void 0, true);
      });
      this.sandboxRunning = false;
    }
  }]);
  return LegacySandbox2;
}();

// node_modules/qiankun/es/sandbox/patchers/css.js
var css_exports = {};
__export(css_exports, {
  QiankunCSSRewriteAttr: () => QiankunCSSRewriteAttr,
  ScopedCSS: () => ScopedCSS,
  process: () => process2
});
var RuleType;
(function(RuleType2) {
  RuleType2[RuleType2["STYLE"] = 1] = "STYLE";
  RuleType2[RuleType2["MEDIA"] = 4] = "MEDIA";
  RuleType2[RuleType2["SUPPORTS"] = 12] = "SUPPORTS";
  RuleType2[RuleType2["IMPORT"] = 3] = "IMPORT";
  RuleType2[RuleType2["FONT_FACE"] = 5] = "FONT_FACE";
  RuleType2[RuleType2["PAGE"] = 6] = "PAGE";
  RuleType2[RuleType2["KEYFRAMES"] = 7] = "KEYFRAMES";
  RuleType2[RuleType2["KEYFRAME"] = 8] = "KEYFRAME";
})(RuleType || (RuleType = {}));
var arrayify = function arrayify2(list) {
  return [].slice.call(list, 0);
};
var rawDocumentBodyAppend = HTMLBodyElement.prototype.appendChild;
var ScopedCSS = function() {
  function ScopedCSS2() {
    _classCallCheck(this, ScopedCSS2);
    this.sheet = void 0;
    this.swapNode = void 0;
    var styleNode = document.createElement("style");
    rawDocumentBodyAppend.call(document.body, styleNode);
    this.swapNode = styleNode;
    this.sheet = styleNode.sheet;
    this.sheet.disabled = true;
  }
  _createClass(ScopedCSS2, [{
    key: "process",
    value: function process4(styleNode) {
      var _this = this;
      var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      if (ScopedCSS2.ModifiedTag in styleNode) {
        return;
      }
      if (styleNode.textContent !== "") {
        var _sheet$cssRules;
        var textNode = document.createTextNode(styleNode.textContent || "");
        this.swapNode.appendChild(textNode);
        var sheet = this.swapNode.sheet;
        var rules = arrayify((_sheet$cssRules = sheet === null || sheet === void 0 ? void 0 : sheet.cssRules) !== null && _sheet$cssRules !== void 0 ? _sheet$cssRules : []);
        var css = this.rewrite(rules, prefix);
        styleNode.textContent = css;
        this.swapNode.removeChild(textNode);
        styleNode[ScopedCSS2.ModifiedTag] = true;
        return;
      }
      var mutator = new MutationObserver(function(mutations) {
        for (var i2 = 0; i2 < mutations.length; i2 += 1) {
          var mutation = mutations[i2];
          if (ScopedCSS2.ModifiedTag in styleNode) {
            return;
          }
          if (mutation.type === "childList") {
            var _sheet$cssRules2;
            var _sheet = styleNode.sheet;
            var _rules = arrayify((_sheet$cssRules2 = _sheet === null || _sheet === void 0 ? void 0 : _sheet.cssRules) !== null && _sheet$cssRules2 !== void 0 ? _sheet$cssRules2 : []);
            var _css = _this.rewrite(_rules, prefix);
            styleNode.textContent = _css;
            styleNode[ScopedCSS2.ModifiedTag] = true;
          }
        }
      });
      mutator.observe(styleNode, {
        childList: true
      });
    }
  }, {
    key: "rewrite",
    value: function rewrite(rules) {
      var _this2 = this;
      var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var css = "";
      rules.forEach(function(rule) {
        switch (rule.type) {
          case RuleType.STYLE:
            css += _this2.ruleStyle(rule, prefix);
            break;
          case RuleType.MEDIA:
            css += _this2.ruleMedia(rule, prefix);
            break;
          case RuleType.SUPPORTS:
            css += _this2.ruleSupport(rule, prefix);
            break;
          default:
            css += "".concat(rule.cssText);
            break;
        }
      });
      return css;
    }
  }, {
    key: "ruleStyle",
    value: function ruleStyle(rule, prefix) {
      var rootSelectorRE = /((?:[^\w\-.#]|^)(body|html|:root))/gm;
      var rootCombinationRE = /(html[^\w{[]+)/gm;
      var selector = rule.selectorText.trim();
      var cssText = rule.cssText;
      if (selector === "html" || selector === "body" || selector === ":root") {
        return cssText.replace(rootSelectorRE, prefix);
      }
      if (rootCombinationRE.test(rule.selectorText)) {
        var siblingSelectorRE = /(html[^\w{]+)(\+|~)/gm;
        if (!siblingSelectorRE.test(rule.selectorText)) {
          cssText = cssText.replace(rootCombinationRE, "");
        }
      }
      cssText = cssText.replace(/^[\s\S]+{/, function(selectors) {
        return selectors.replace(/(^|,\n?)([^,]+)/g, function(item, p2, s2) {
          if (rootSelectorRE.test(item)) {
            return item.replace(rootSelectorRE, function(m2) {
              var whitePrevChars = [",", "("];
              if (m2 && whitePrevChars.includes(m2[0])) {
                return "".concat(m2[0]).concat(prefix);
              }
              return prefix;
            });
          }
          return "".concat(p2).concat(prefix, " ").concat(s2.replace(/^ */, ""));
        });
      });
      return cssText;
    }
  }, {
    key: "ruleMedia",
    value: function ruleMedia(rule, prefix) {
      var css = this.rewrite(arrayify(rule.cssRules), prefix);
      return "@media ".concat(rule.conditionText || rule.media.mediaText, " {").concat(css, "}");
    }
  }, {
    key: "ruleSupport",
    value: function ruleSupport(rule, prefix) {
      var css = this.rewrite(arrayify(rule.cssRules), prefix);
      return "@supports ".concat(rule.conditionText || rule.cssText.split("{")[0], " {").concat(css, "}");
    }
  }]);
  return ScopedCSS2;
}();
ScopedCSS.ModifiedTag = "Symbol(style-modified-qiankun)";
var processor;
var QiankunCSSRewriteAttr = "data-qiankun";
var process2 = function process3(appWrapper, stylesheetElement, appName) {
  if (!processor) {
    processor = new ScopedCSS();
  }
  if (stylesheetElement.tagName === "LINK") {
    console.warn("Feature: sandbox.experimentalStyleIsolation is not support for link element yet.");
  }
  var mountDOM = appWrapper;
  if (!mountDOM) {
    return;
  }
  var tag = (mountDOM.tagName || "").toLowerCase();
  if (tag && stylesheetElement.tagName === "STYLE") {
    var prefix = "".concat(tag, "[").concat(QiankunCSSRewriteAttr, '="').concat(appName, '"]');
    processor.process(stylesheetElement, prefix);
  }
};

// node_modules/qiankun/es/sandbox/patchers/dynamicAppend/common.js
var import_isFunction2 = __toESM(require_isFunction());
var rawHeadAppendChild = HTMLHeadElement.prototype.appendChild;
var rawHeadRemoveChild = HTMLHeadElement.prototype.removeChild;
var rawBodyAppendChild = HTMLBodyElement.prototype.appendChild;
var rawBodyRemoveChild = HTMLBodyElement.prototype.removeChild;
var rawHeadInsertBefore = HTMLHeadElement.prototype.insertBefore;
var rawRemoveChild = HTMLElement.prototype.removeChild;
var SCRIPT_TAG_NAME = "SCRIPT";
var LINK_TAG_NAME = "LINK";
var STYLE_TAG_NAME = "STYLE";
var styleElementTargetSymbol = Symbol("target");
var getAppWrapperHeadElement = function getAppWrapperHeadElement2(appWrapper) {
  return appWrapper.querySelector(qiankunHeadTagName);
};
function isExecutableScriptType(script) {
  return !script.type || ["text/javascript", "module", "application/javascript", "text/ecmascript", "application/ecmascript"].indexOf(script.type) !== -1;
}
function isHijackingTag(tagName) {
  return (tagName === null || tagName === void 0 ? void 0 : tagName.toUpperCase()) === LINK_TAG_NAME || (tagName === null || tagName === void 0 ? void 0 : tagName.toUpperCase()) === STYLE_TAG_NAME || (tagName === null || tagName === void 0 ? void 0 : tagName.toUpperCase()) === SCRIPT_TAG_NAME;
}
function isStyledComponentsLike(element) {
  var _element$sheet, _getStyledElementCSSR;
  return !element.textContent && (((_element$sheet = element.sheet) === null || _element$sheet === void 0 ? void 0 : _element$sheet.cssRules.length) || ((_getStyledElementCSSR = getStyledElementCSSRules(element)) === null || _getStyledElementCSSR === void 0 ? void 0 : _getStyledElementCSSR.length));
}
var appsCounterMap = /* @__PURE__ */ new Map();
function calcAppCount(appName, calcType, status) {
  var appCount = appsCounterMap.get(appName) || {
    bootstrappingPatchCount: 0,
    mountingPatchCount: 0
  };
  switch (calcType) {
    case "increase":
      appCount["".concat(status, "PatchCount")] += 1;
      break;
    case "decrease":
      if (appCount["".concat(status, "PatchCount")] > 0) {
        appCount["".concat(status, "PatchCount")] -= 1;
      }
      break;
  }
  appsCounterMap.set(appName, appCount);
}
function isAllAppsUnmounted() {
  return Array.from(appsCounterMap.entries()).every(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), _ref2$ = _ref2[1], bpc = _ref2$.bootstrappingPatchCount, mpc = _ref2$.mountingPatchCount;
    return bpc === 0 && mpc === 0;
  });
}
function patchCustomEvent(e2, elementGetter) {
  Object.defineProperties(e2, {
    srcElement: {
      get: elementGetter
    },
    target: {
      get: elementGetter
    }
  });
  return e2;
}
function manualInvokeElementOnLoad(element) {
  var loadEvent = new CustomEvent("load");
  var patchedEvent = patchCustomEvent(loadEvent, function() {
    return element;
  });
  if ((0, import_isFunction2.default)(element.onload)) {
    element.onload(patchedEvent);
  } else {
    element.dispatchEvent(patchedEvent);
  }
}
function manualInvokeElementOnError(element) {
  var errorEvent = new CustomEvent("error");
  var patchedEvent = patchCustomEvent(errorEvent, function() {
    return element;
  });
  if ((0, import_isFunction2.default)(element.onerror)) {
    element.onerror(patchedEvent);
  } else {
    element.dispatchEvent(patchedEvent);
  }
}
function convertLinkAsStyle(element, postProcess) {
  var fetchFn = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : fetch;
  var styleElement = document.createElement("style");
  var href = element.href;
  styleElement.dataset.qiankunHref = href;
  fetchFn(href).then(function(res) {
    return res.text();
  }).then(function(styleContext) {
    styleElement.appendChild(document.createTextNode(styleContext));
    postProcess(styleElement);
    manualInvokeElementOnLoad(element);
  }).catch(function() {
    return manualInvokeElementOnError(element);
  });
  return styleElement;
}
var styledComponentCSSRulesMap = /* @__PURE__ */ new WeakMap();
var dynamicScriptAttachedCommentMap = /* @__PURE__ */ new WeakMap();
var dynamicLinkAttachedInlineStyleMap = /* @__PURE__ */ new WeakMap();
function recordStyledComponentsCSSRules(styleElements) {
  styleElements.forEach(function(styleElement) {
    if (styleElement instanceof HTMLStyleElement && isStyledComponentsLike(styleElement)) {
      if (styleElement.sheet) {
        styledComponentCSSRulesMap.set(styleElement, styleElement.sheet.cssRules);
      }
    }
  });
}
function getStyledElementCSSRules(styledElement) {
  return styledComponentCSSRulesMap.get(styledElement);
}
function getOverwrittenAppendChildOrInsertBefore(opts) {
  return function appendChildOrInsertBefore(newChild) {
    var refChild = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var element = newChild;
    var rawDOMAppendOrInsertBefore = opts.rawDOMAppendOrInsertBefore, isInvokedByMicroApp = opts.isInvokedByMicroApp, containerConfigGetter = opts.containerConfigGetter, _opts$target = opts.target, target = _opts$target === void 0 ? "body" : _opts$target;
    if (!isHijackingTag(element.tagName) || !isInvokedByMicroApp(element)) {
      return rawDOMAppendOrInsertBefore.call(this, element, refChild);
    }
    if (element.tagName) {
      var containerConfig = containerConfigGetter(element);
      var appName = containerConfig.appName, appWrapperGetter = containerConfig.appWrapperGetter, proxy = containerConfig.proxy, strictGlobal = containerConfig.strictGlobal, speedySandbox = containerConfig.speedySandbox, dynamicStyleSheetElements = containerConfig.dynamicStyleSheetElements, scopedCSS = containerConfig.scopedCSS, excludeAssetFilter = containerConfig.excludeAssetFilter;
      switch (element.tagName) {
        case LINK_TAG_NAME:
        case STYLE_TAG_NAME: {
          var stylesheetElement = newChild;
          var _stylesheetElement = stylesheetElement, href = _stylesheetElement.href;
          if (excludeAssetFilter && href && excludeAssetFilter(href)) {
            return rawDOMAppendOrInsertBefore.call(this, element, refChild);
          }
          Object.defineProperty(stylesheetElement, styleElementTargetSymbol, {
            value: target,
            writable: true,
            configurable: true
          });
          var appWrapper = appWrapperGetter();
          if (scopedCSS) {
            var _element$tagName;
            var linkElementUsingStylesheet = ((_element$tagName = element.tagName) === null || _element$tagName === void 0 ? void 0 : _element$tagName.toUpperCase()) === LINK_TAG_NAME && element.rel === "stylesheet" && element.href;
            if (linkElementUsingStylesheet) {
              var _frameworkConfigurati;
              var _fetch = typeof frameworkConfiguration.fetch === "function" ? frameworkConfiguration.fetch : (_frameworkConfigurati = frameworkConfiguration.fetch) === null || _frameworkConfigurati === void 0 ? void 0 : _frameworkConfigurati.fn;
              stylesheetElement = convertLinkAsStyle(element, function(styleElement) {
                return process2(appWrapper, styleElement, appName);
              }, _fetch);
              dynamicLinkAttachedInlineStyleMap.set(element, stylesheetElement);
            } else {
              process2(appWrapper, stylesheetElement, appName);
            }
          }
          var mountDOM = target === "head" ? getAppWrapperHeadElement(appWrapper) : appWrapper;
          dynamicStyleSheetElements.push(stylesheetElement);
          var referenceNode = mountDOM.contains(refChild) ? refChild : null;
          return rawDOMAppendOrInsertBefore.call(mountDOM, stylesheetElement, referenceNode);
        }
        case SCRIPT_TAG_NAME: {
          var _element = element, src = _element.src, text = _element.text;
          if (excludeAssetFilter && src && excludeAssetFilter(src) || !isExecutableScriptType(element)) {
            return rawDOMAppendOrInsertBefore.call(this, element, refChild);
          }
          var _appWrapper = appWrapperGetter();
          var _mountDOM = target === "head" ? getAppWrapperHeadElement(_appWrapper) : _appWrapper;
          var _fetch2 = frameworkConfiguration.fetch;
          var _referenceNode = _mountDOM.contains(refChild) ? refChild : null;
          var scopedGlobalVariables = speedySandbox ? trustedGlobals : [];
          if (src) {
            _execScripts(null, [src], proxy, {
              fetch: _fetch2,
              strictGlobal,
              scopedGlobalVariables,
              beforeExec: function beforeExec() {
                var isCurrentScriptConfigurable = function isCurrentScriptConfigurable2() {
                  var descriptor = Object.getOwnPropertyDescriptor(document, "currentScript");
                  return !descriptor || descriptor.configurable;
                };
                if (isCurrentScriptConfigurable()) {
                  Object.defineProperty(document, "currentScript", {
                    get: function get() {
                      return element;
                    },
                    configurable: true
                  });
                }
              },
              success: function success() {
                manualInvokeElementOnLoad(element);
                element = null;
              },
              error: function error() {
                manualInvokeElementOnError(element);
                element = null;
              }
            });
            var dynamicScriptCommentElement = document.createComment("dynamic script ".concat(src, " replaced by qiankun"));
            dynamicScriptAttachedCommentMap.set(element, dynamicScriptCommentElement);
            return rawDOMAppendOrInsertBefore.call(_mountDOM, dynamicScriptCommentElement, _referenceNode);
          }
          _execScripts(null, ["<script>".concat(text, "<\/script>")], proxy, {
            strictGlobal,
            scopedGlobalVariables
          });
          var dynamicInlineScriptCommentElement = document.createComment("dynamic inline script replaced by qiankun");
          dynamicScriptAttachedCommentMap.set(element, dynamicInlineScriptCommentElement);
          return rawDOMAppendOrInsertBefore.call(_mountDOM, dynamicInlineScriptCommentElement, _referenceNode);
        }
        default:
          break;
      }
    }
    return rawDOMAppendOrInsertBefore.call(this, element, refChild);
  };
}
function getNewRemoveChild(headOrBodyRemoveChild, containerConfigGetter, target) {
  return function removeChild(child) {
    var tagName = child.tagName;
    if (!isHijackingTag(tagName))
      return headOrBodyRemoveChild.call(this, child);
    try {
      var attachedElement;
      var _containerConfigGette = containerConfigGetter(child), appWrapperGetter = _containerConfigGette.appWrapperGetter, dynamicStyleSheetElements = _containerConfigGette.dynamicStyleSheetElements;
      switch (tagName) {
        case STYLE_TAG_NAME:
        case LINK_TAG_NAME: {
          attachedElement = dynamicLinkAttachedInlineStyleMap.get(child) || child;
          var dynamicElementIndex = dynamicStyleSheetElements.indexOf(attachedElement);
          if (dynamicElementIndex !== -1) {
            dynamicStyleSheetElements.splice(dynamicElementIndex, 1);
          }
          break;
        }
        case SCRIPT_TAG_NAME: {
          attachedElement = dynamicScriptAttachedCommentMap.get(child) || child;
          break;
        }
        default: {
          attachedElement = child;
        }
      }
      var appWrapper = appWrapperGetter();
      var container = target === "head" ? getAppWrapperHeadElement(appWrapper) : appWrapper;
      if (container.contains(attachedElement)) {
        return rawRemoveChild.call(attachedElement.parentNode, attachedElement);
      }
    } catch (e2) {
      console.warn(e2);
    }
    return headOrBodyRemoveChild.call(this, child);
  };
}
function patchHTMLDynamicAppendPrototypeFunctions(isInvokedByMicroApp, containerConfigGetter) {
  if (HTMLHeadElement.prototype.appendChild === rawHeadAppendChild && HTMLBodyElement.prototype.appendChild === rawBodyAppendChild && HTMLHeadElement.prototype.insertBefore === rawHeadInsertBefore) {
    HTMLHeadElement.prototype.appendChild = getOverwrittenAppendChildOrInsertBefore({
      rawDOMAppendOrInsertBefore: rawHeadAppendChild,
      containerConfigGetter,
      isInvokedByMicroApp,
      target: "head"
    });
    HTMLBodyElement.prototype.appendChild = getOverwrittenAppendChildOrInsertBefore({
      rawDOMAppendOrInsertBefore: rawBodyAppendChild,
      containerConfigGetter,
      isInvokedByMicroApp,
      target: "body"
    });
    HTMLHeadElement.prototype.insertBefore = getOverwrittenAppendChildOrInsertBefore({
      rawDOMAppendOrInsertBefore: rawHeadInsertBefore,
      containerConfigGetter,
      isInvokedByMicroApp,
      target: "head"
    });
  }
  if (HTMLHeadElement.prototype.removeChild === rawHeadRemoveChild && HTMLBodyElement.prototype.removeChild === rawBodyRemoveChild) {
    HTMLHeadElement.prototype.removeChild = getNewRemoveChild(rawHeadRemoveChild, containerConfigGetter, "head");
    HTMLBodyElement.prototype.removeChild = getNewRemoveChild(rawBodyRemoveChild, containerConfigGetter, "body");
  }
  return function unpatch() {
    HTMLHeadElement.prototype.appendChild = rawHeadAppendChild;
    HTMLHeadElement.prototype.removeChild = rawHeadRemoveChild;
    HTMLBodyElement.prototype.appendChild = rawBodyAppendChild;
    HTMLBodyElement.prototype.removeChild = rawBodyRemoveChild;
    HTMLHeadElement.prototype.insertBefore = rawHeadInsertBefore;
  };
}
function rebuildCSSRules(styleSheetElements, reAppendElement) {
  styleSheetElements.forEach(function(stylesheetElement) {
    var appendSuccess = reAppendElement(stylesheetElement);
    if (appendSuccess) {
      if (stylesheetElement instanceof HTMLStyleElement && isStyledComponentsLike(stylesheetElement)) {
        var cssRules = getStyledElementCSSRules(stylesheetElement);
        if (cssRules) {
          for (var i2 = 0; i2 < cssRules.length; i2++) {
            var cssRule = cssRules[i2];
            var cssStyleSheetElement = stylesheetElement.sheet;
            cssStyleSheetElement.insertRule(cssRule.cssText, cssStyleSheetElement.cssRules.length);
          }
        }
      }
    }
  });
}

// node_modules/qiankun/es/sandbox/patchers/dynamicAppend/forLooseSandbox.js
function patchLooseSandbox(appName, appWrapperGetter, proxy) {
  var mounting = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
  var scopedCSS = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
  var excludeAssetFilter = arguments.length > 5 ? arguments[5] : void 0;
  var dynamicStyleSheetElements = [];
  var unpatchDynamicAppendPrototypeFunctions = patchHTMLDynamicAppendPrototypeFunctions(function() {
    return bt(window.location).some(function(name2) {
      return name2 === appName;
    });
  }, function() {
    return {
      appName,
      appWrapperGetter,
      proxy,
      strictGlobal: false,
      speedySandbox: false,
      scopedCSS,
      dynamicStyleSheetElements,
      excludeAssetFilter
    };
  });
  if (!mounting)
    calcAppCount(appName, "increase", "bootstrapping");
  if (mounting)
    calcAppCount(appName, "increase", "mounting");
  return function free() {
    if (!mounting)
      calcAppCount(appName, "decrease", "bootstrapping");
    if (mounting)
      calcAppCount(appName, "decrease", "mounting");
    if (isAllAppsUnmounted())
      unpatchDynamicAppendPrototypeFunctions();
    recordStyledComponentsCSSRules(dynamicStyleSheetElements);
    return function rebuild() {
      rebuildCSSRules(dynamicStyleSheetElements, function(stylesheetElement) {
        var appWrapper = appWrapperGetter();
        if (!appWrapper.contains(stylesheetElement)) {
          document.head.appendChild.call(appWrapper, stylesheetElement);
          return true;
        }
        return false;
      });
      if (mounting) {
        dynamicStyleSheetElements = [];
      }
    };
  };
}

// node_modules/qiankun/es/sandbox/patchers/dynamicAppend/forStrictSandbox.js
Object.defineProperty(nativeGlobal, "__proxyAttachContainerConfigMap__", {
  enumerable: false,
  writable: true
});
nativeGlobal.__proxyAttachContainerConfigMap__ = nativeGlobal.__proxyAttachContainerConfigMap__ || /* @__PURE__ */ new WeakMap();
var proxyAttachContainerConfigMap = nativeGlobal.__proxyAttachContainerConfigMap__;
var elementAttachContainerConfigMap = /* @__PURE__ */ new WeakMap();
var docCreatePatchedMap = /* @__PURE__ */ new WeakMap();
function patchDocumentCreateElement() {
  var docCreateElementFnBeforeOverwrite = docCreatePatchedMap.get(document.createElement);
  if (!docCreateElementFnBeforeOverwrite) {
    var rawDocumentCreateElement = document.createElement;
    Document.prototype.createElement = function createElement2(tagName, options) {
      var element = rawDocumentCreateElement.call(this, tagName, options);
      if (isHijackingTag(tagName)) {
        var _ref = getCurrentRunningApp() || {}, currentRunningSandboxProxy = _ref.window;
        if (currentRunningSandboxProxy) {
          var proxyContainerConfig = proxyAttachContainerConfigMap.get(currentRunningSandboxProxy);
          if (proxyContainerConfig) {
            elementAttachContainerConfigMap.set(element, proxyContainerConfig);
          }
        }
      }
      return element;
    };
    if (document.hasOwnProperty("createElement")) {
      document.createElement = Document.prototype.createElement;
    }
    docCreatePatchedMap.set(Document.prototype.createElement, rawDocumentCreateElement);
  }
  return function unpatch() {
    if (docCreateElementFnBeforeOverwrite) {
      Document.prototype.createElement = docCreateElementFnBeforeOverwrite;
      document.createElement = docCreateElementFnBeforeOverwrite;
    }
  };
}
function patchStrictSandbox(appName, appWrapperGetter, proxy) {
  var mounting = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
  var scopedCSS = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
  var excludeAssetFilter = arguments.length > 5 ? arguments[5] : void 0;
  var speedySandbox = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : false;
  var containerConfig = proxyAttachContainerConfigMap.get(proxy);
  if (!containerConfig) {
    containerConfig = {
      appName,
      proxy,
      appWrapperGetter,
      dynamicStyleSheetElements: [],
      strictGlobal: true,
      speedySandbox,
      excludeAssetFilter,
      scopedCSS
    };
    proxyAttachContainerConfigMap.set(proxy, containerConfig);
  }
  var _containerConfig = containerConfig, dynamicStyleSheetElements = _containerConfig.dynamicStyleSheetElements;
  var unpatchDocumentCreate = patchDocumentCreateElement();
  var unpatchDynamicAppendPrototypeFunctions = patchHTMLDynamicAppendPrototypeFunctions(function(element) {
    return elementAttachContainerConfigMap.has(element);
  }, function(element) {
    return elementAttachContainerConfigMap.get(element);
  });
  if (!mounting)
    calcAppCount(appName, "increase", "bootstrapping");
  if (mounting)
    calcAppCount(appName, "increase", "mounting");
  return function free() {
    if (!mounting)
      calcAppCount(appName, "decrease", "bootstrapping");
    if (mounting)
      calcAppCount(appName, "decrease", "mounting");
    if (isAllAppsUnmounted()) {
      unpatchDynamicAppendPrototypeFunctions();
      unpatchDocumentCreate();
    }
    recordStyledComponentsCSSRules(dynamicStyleSheetElements);
    return function rebuild() {
      rebuildCSSRules(dynamicStyleSheetElements, function(stylesheetElement) {
        var appWrapper = appWrapperGetter();
        if (!appWrapper.contains(stylesheetElement)) {
          var mountDom = stylesheetElement[styleElementTargetSymbol] === "head" ? getAppWrapperHeadElement(appWrapper) : appWrapper;
          rawHeadAppendChild.call(mountDom, stylesheetElement);
          return true;
        }
        return false;
      });
    };
  };
}

// node_modules/qiankun/es/sandbox/patchers/historyListener.js
var import_isFunction3 = __toESM(require_isFunction());
var import_noop = __toESM(require_noop());
function patch() {
  var rawHistoryListen = function rawHistoryListen2(_2) {
    return import_noop.default;
  };
  var historyListeners = [];
  var historyUnListens = [];
  if (window.g_history && (0, import_isFunction3.default)(window.g_history.listen)) {
    rawHistoryListen = window.g_history.listen.bind(window.g_history);
    window.g_history.listen = function(listener) {
      historyListeners.push(listener);
      var unListen = rawHistoryListen(listener);
      historyUnListens.push(unListen);
      return function() {
        unListen();
        historyUnListens.splice(historyUnListens.indexOf(unListen), 1);
        historyListeners.splice(historyListeners.indexOf(listener), 1);
      };
    };
  }
  return function free() {
    var rebuild = import_noop.default;
    if (historyListeners.length) {
      rebuild = function rebuild2() {
        historyListeners.forEach(function(listener) {
          return window.g_history.listen(listener);
        });
      };
    }
    historyUnListens.forEach(function(unListen) {
      return unListen();
    });
    if (window.g_history && (0, import_isFunction3.default)(window.g_history.listen)) {
      window.g_history.listen = rawHistoryListen;
    }
    return rebuild;
  };
}

// node_modules/qiankun/es/sandbox/patchers/interval.js
var import_noop2 = __toESM(require_noop());
var rawWindowInterval = window.setInterval;
var rawWindowClearInterval = window.clearInterval;
function patch2(global2) {
  var intervals = [];
  global2.clearInterval = function(intervalId) {
    intervals = intervals.filter(function(id) {
      return id !== intervalId;
    });
    return rawWindowClearInterval.call(window, intervalId);
  };
  global2.setInterval = function(handler, timeout) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    var intervalId = rawWindowInterval.apply(void 0, [handler, timeout].concat(args));
    intervals = [].concat(_toConsumableArray(intervals), [intervalId]);
    return intervalId;
  };
  return function free() {
    intervals.forEach(function(id) {
      return global2.clearInterval(id);
    });
    global2.setInterval = rawWindowInterval;
    global2.clearInterval = rawWindowClearInterval;
    return import_noop2.default;
  };
}

// node_modules/qiankun/es/sandbox/patchers/windowListener.js
var import_noop3 = __toESM(require_noop());
var rawAddEventListener = window.addEventListener;
var rawRemoveEventListener = window.removeEventListener;
function patch3(global2) {
  var listenerMap = /* @__PURE__ */ new Map();
  global2.addEventListener = function(type, listener, options) {
    var listeners = listenerMap.get(type) || [];
    listenerMap.set(type, [].concat(_toConsumableArray(listeners), [listener]));
    return rawAddEventListener.call(window, type, listener, options);
  };
  global2.removeEventListener = function(type, listener, options) {
    var storedTypeListeners = listenerMap.get(type);
    if (storedTypeListeners && storedTypeListeners.length && storedTypeListeners.indexOf(listener) !== -1) {
      storedTypeListeners.splice(storedTypeListeners.indexOf(listener), 1);
    }
    return rawRemoveEventListener.call(window, type, listener, options);
  };
  return function free() {
    listenerMap.forEach(function(listeners, type) {
      return _toConsumableArray(listeners).forEach(function(listener) {
        return global2.removeEventListener(type, listener);
      });
    });
    global2.addEventListener = rawAddEventListener;
    global2.removeEventListener = rawRemoveEventListener;
    return import_noop3.default;
  };
}

// node_modules/qiankun/es/sandbox/patchers/index.js
function patchAtMounting(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter, speedySandBox) {
  var _patchersInSandbox, _patchersInSandbox$sa;
  var basePatchers = [function() {
    return patch2(sandbox.proxy);
  }, function() {
    return patch3(sandbox.proxy);
  }, function() {
    return patch();
  }];
  var patchersInSandbox = (_patchersInSandbox = {}, _defineProperty(_patchersInSandbox, SandBoxType.LegacyProxy, [].concat(basePatchers, [function() {
    return patchLooseSandbox(appName, elementGetter, sandbox.proxy, true, scopedCSS, excludeAssetFilter);
  }])), _defineProperty(_patchersInSandbox, SandBoxType.Proxy, [].concat(basePatchers, [function() {
    return patchStrictSandbox(appName, elementGetter, sandbox.proxy, true, scopedCSS, excludeAssetFilter, speedySandBox);
  }])), _defineProperty(_patchersInSandbox, SandBoxType.Snapshot, [].concat(basePatchers, [function() {
    return patchLooseSandbox(appName, elementGetter, sandbox.proxy, true, scopedCSS, excludeAssetFilter);
  }])), _patchersInSandbox);
  return (_patchersInSandbox$sa = patchersInSandbox[sandbox.type]) === null || _patchersInSandbox$sa === void 0 ? void 0 : _patchersInSandbox$sa.map(function(patch4) {
    return patch4();
  });
}
function patchAtBootstrapping(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter, speedySandBox) {
  var _patchersInSandbox2, _patchersInSandbox$sa2;
  var patchersInSandbox = (_patchersInSandbox2 = {}, _defineProperty(_patchersInSandbox2, SandBoxType.LegacyProxy, [function() {
    return patchLooseSandbox(appName, elementGetter, sandbox.proxy, false, scopedCSS, excludeAssetFilter);
  }]), _defineProperty(_patchersInSandbox2, SandBoxType.Proxy, [function() {
    return patchStrictSandbox(appName, elementGetter, sandbox.proxy, false, scopedCSS, excludeAssetFilter, speedySandBox);
  }]), _defineProperty(_patchersInSandbox2, SandBoxType.Snapshot, [function() {
    return patchLooseSandbox(appName, elementGetter, sandbox.proxy, false, scopedCSS, excludeAssetFilter);
  }]), _patchersInSandbox2);
  return (_patchersInSandbox$sa2 = patchersInSandbox[sandbox.type]) === null || _patchersInSandbox$sa2 === void 0 ? void 0 : _patchersInSandbox$sa2.map(function(patch4) {
    return patch4();
  });
}

// node_modules/qiankun/es/sandbox/proxySandbox.js
function uniq(array) {
  return array.filter(function filter(element) {
    return element in this ? false : this[element] = true;
  }, /* @__PURE__ */ Object.create(null));
}
var rawObjectDefineProperty = Object.defineProperty;
var variableWhiteListInDev = true ? [
  "__REACT_ERROR_OVERLAY_GLOBAL_HOOK__"
] : [];
var globalVariableWhiteList = [
  "System",
  "__cjsWrapper"
].concat(variableWhiteListInDev);
var unscopables = trustedGlobals.reduce(function(acc, key) {
  return _objectSpread2(_objectSpread2({}, acc), {}, _defineProperty({}, key, true));
}, {
  __proto__: null
});
var useNativeWindowForBindingsProps = /* @__PURE__ */ new Map([["fetch", true], ["mockDomAPIInBlackList", false]]);
function createFakeWindow(globalContext) {
  var propertiesWithGetter = /* @__PURE__ */ new Map();
  var fakeWindow = {};
  Object.getOwnPropertyNames(globalContext).filter(function(p2) {
    var descriptor = Object.getOwnPropertyDescriptor(globalContext, p2);
    return !(descriptor === null || descriptor === void 0 ? void 0 : descriptor.configurable);
  }).forEach(function(p2) {
    var descriptor = Object.getOwnPropertyDescriptor(globalContext, p2);
    if (descriptor) {
      var hasGetter = Object.prototype.hasOwnProperty.call(descriptor, "get");
      if (p2 === "top" || p2 === "parent" || p2 === "self" || p2 === "window" || false) {
        descriptor.configurable = true;
        if (!hasGetter) {
          descriptor.writable = true;
        }
      }
      if (hasGetter)
        propertiesWithGetter.set(p2, true);
      rawObjectDefineProperty(fakeWindow, p2, Object.freeze(descriptor));
    }
  });
  return {
    fakeWindow,
    propertiesWithGetter
  };
}
var activeSandboxCount = 0;
var ProxySandbox = function() {
  function ProxySandbox2(name2) {
    var _this = this;
    var globalContext = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
    _classCallCheck(this, ProxySandbox2);
    this.updatedValueSet = /* @__PURE__ */ new Set();
    this.name = void 0;
    this.type = void 0;
    this.proxy = void 0;
    this.sandboxRunning = true;
    this.latestSetProp = null;
    this.globalWhitelistPrevDescriptor = {};
    this.globalContext = void 0;
    this.name = name2;
    this.globalContext = globalContext;
    this.type = SandBoxType.Proxy;
    var updatedValueSet = this.updatedValueSet;
    var _createFakeWindow = createFakeWindow(globalContext), fakeWindow = _createFakeWindow.fakeWindow, propertiesWithGetter = _createFakeWindow.propertiesWithGetter;
    var descriptorTargetMap = /* @__PURE__ */ new Map();
    var hasOwnProperty = function hasOwnProperty2(key) {
      return fakeWindow.hasOwnProperty(key) || globalContext.hasOwnProperty(key);
    };
    var proxy = new Proxy(fakeWindow, {
      set: function set(target, p2, value) {
        if (_this.sandboxRunning) {
          _this.registerRunningApp(name2, proxy);
          if (!target.hasOwnProperty(p2) && globalContext.hasOwnProperty(p2)) {
            var descriptor = Object.getOwnPropertyDescriptor(globalContext, p2);
            var writable = descriptor.writable, configurable = descriptor.configurable, enumerable = descriptor.enumerable, set2 = descriptor.set;
            if (writable || set2) {
              Object.defineProperty(target, p2, {
                configurable,
                enumerable,
                writable: true,
                value
              });
            }
          } else {
            target[p2] = value;
          }
          if (typeof p2 === "string" && globalVariableWhiteList.indexOf(p2) !== -1) {
            _this.globalWhitelistPrevDescriptor[p2] = Object.getOwnPropertyDescriptor(globalContext, p2);
            globalContext[p2] = value;
          }
          updatedValueSet.add(p2);
          _this.latestSetProp = p2;
          return true;
        }
        if (true) {
          console.warn("[qiankun] Set window.".concat(p2.toString(), " while sandbox destroyed or inactive in ").concat(name2, "!"));
        }
        return true;
      },
      get: function get(target, p2) {
        _this.registerRunningApp(name2, proxy);
        if (p2 === Symbol.unscopables)
          return unscopables;
        if (p2 === "window" || p2 === "self") {
          return proxy;
        }
        if (p2 === "globalThis") {
          return proxy;
        }
        if (p2 === "top" || p2 === "parent" || false) {
          if (globalContext === globalContext.parent) {
            return proxy;
          }
          return globalContext[p2];
        }
        if (p2 === "hasOwnProperty") {
          return hasOwnProperty;
        }
        if (p2 === "document") {
          return document;
        }
        if (p2 === "eval") {
          return eval;
        }
        var actualTarget = propertiesWithGetter.has(p2) ? globalContext : p2 in target ? target : globalContext;
        var value = actualTarget[p2];
        if (isPropertyFrozen(actualTarget, p2)) {
          return value;
        }
        var boundTarget = useNativeWindowForBindingsProps.get(p2) ? nativeGlobal : globalContext;
        return getTargetValue(boundTarget, value);
      },
      has: function has(target, p2) {
        return p2 in unscopables || p2 in target || p2 in globalContext;
      },
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, p2) {
        if (target.hasOwnProperty(p2)) {
          var descriptor = Object.getOwnPropertyDescriptor(target, p2);
          descriptorTargetMap.set(p2, "target");
          return descriptor;
        }
        if (globalContext.hasOwnProperty(p2)) {
          var _descriptor = Object.getOwnPropertyDescriptor(globalContext, p2);
          descriptorTargetMap.set(p2, "globalContext");
          if (_descriptor && !_descriptor.configurable) {
            _descriptor.configurable = true;
          }
          return _descriptor;
        }
        return void 0;
      },
      ownKeys: function ownKeys3(target) {
        return uniq(Reflect.ownKeys(globalContext).concat(Reflect.ownKeys(target)));
      },
      defineProperty: function defineProperty(target, p2, attributes) {
        var from = descriptorTargetMap.get(p2);
        switch (from) {
          case "globalContext":
            return Reflect.defineProperty(globalContext, p2, attributes);
          default:
            return Reflect.defineProperty(target, p2, attributes);
        }
      },
      deleteProperty: function deleteProperty(target, p2) {
        _this.registerRunningApp(name2, proxy);
        if (target.hasOwnProperty(p2)) {
          delete target[p2];
          updatedValueSet.delete(p2);
          return true;
        }
        return true;
      },
      getPrototypeOf: function getPrototypeOf() {
        return Reflect.getPrototypeOf(globalContext);
      }
    });
    this.proxy = proxy;
    activeSandboxCount++;
  }
  _createClass(ProxySandbox2, [{
    key: "active",
    value: function active() {
      if (!this.sandboxRunning)
        activeSandboxCount++;
      this.sandboxRunning = true;
    }
  }, {
    key: "inactive",
    value: function inactive() {
      var _this2 = this;
      if (true) {
        console.info("[qiankun:sandbox] ".concat(this.name, " modified global properties restore..."), _toConsumableArray(this.updatedValueSet.keys()));
      }
      if (--activeSandboxCount === 0) {
        Object.keys(this.globalWhitelistPrevDescriptor).forEach(function(p2) {
          var descriptor = _this2.globalWhitelistPrevDescriptor[p2];
          if (descriptor) {
            Object.defineProperty(_this2.globalContext, p2, descriptor);
          } else {
            delete _this2.globalContext[p2];
          }
        });
      }
      this.sandboxRunning = false;
    }
  }, {
    key: "registerRunningApp",
    value: function registerRunningApp(name2, proxy) {
      if (this.sandboxRunning) {
        var currentRunningApp2 = getCurrentRunningApp();
        if (!currentRunningApp2 || currentRunningApp2.name !== name2) {
          setCurrentRunningApp({
            name: name2,
            window: proxy
          });
        }
        nextTask(function() {
          setCurrentRunningApp(null);
        });
      }
    }
  }]);
  return ProxySandbox2;
}();

// node_modules/qiankun/es/sandbox/snapshotSandbox.js
function iter(obj, callbackFn) {
  for (var prop in obj) {
    if (obj.hasOwnProperty(prop) || prop === "clearInterval") {
      callbackFn(prop);
    }
  }
}
var SnapshotSandbox = function() {
  function SnapshotSandbox2(name2) {
    _classCallCheck(this, SnapshotSandbox2);
    this.proxy = void 0;
    this.name = void 0;
    this.type = void 0;
    this.sandboxRunning = true;
    this.windowSnapshot = void 0;
    this.modifyPropsMap = {};
    this.name = name2;
    this.proxy = window;
    this.type = SandBoxType.Snapshot;
  }
  _createClass(SnapshotSandbox2, [{
    key: "active",
    value: function active() {
      var _this = this;
      this.windowSnapshot = {};
      iter(window, function(prop) {
        _this.windowSnapshot[prop] = window[prop];
      });
      Object.keys(this.modifyPropsMap).forEach(function(p2) {
        window[p2] = _this.modifyPropsMap[p2];
      });
      this.sandboxRunning = true;
    }
  }, {
    key: "inactive",
    value: function inactive() {
      var _this2 = this;
      this.modifyPropsMap = {};
      iter(window, function(prop) {
        if (window[prop] !== _this2.windowSnapshot[prop]) {
          _this2.modifyPropsMap[prop] = window[prop];
          window[prop] = _this2.windowSnapshot[prop];
        }
      });
      if (true) {
        console.info("[qiankun:sandbox] ".concat(this.name, " origin window restore..."), Object.keys(this.modifyPropsMap));
      }
      this.sandboxRunning = false;
    }
  }]);
  return SnapshotSandbox2;
}();

// node_modules/qiankun/es/sandbox/index.js
function createSandboxContainer(appName, elementGetter, scopedCSS, useLooseSandbox, excludeAssetFilter, globalContext, speedySandBox) {
  var sandbox;
  if (window.Proxy) {
    sandbox = useLooseSandbox ? new LegacySandbox(appName, globalContext) : new ProxySandbox(appName, globalContext);
  } else {
    sandbox = new SnapshotSandbox(appName);
  }
  var bootstrappingFreers = patchAtBootstrapping(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter, speedySandBox);
  var mountingFreers = [];
  var sideEffectsRebuilders = [];
  return {
    instance: sandbox,
    mount: function mount() {
      return _asyncToGenerator(import_regenerator3.default.mark(function _callee() {
        var sideEffectsRebuildersAtBootstrapping, sideEffectsRebuildersAtMounting;
        return import_regenerator3.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                sandbox.active();
                sideEffectsRebuildersAtBootstrapping = sideEffectsRebuilders.slice(0, bootstrappingFreers.length);
                sideEffectsRebuildersAtMounting = sideEffectsRebuilders.slice(bootstrappingFreers.length);
                if (sideEffectsRebuildersAtBootstrapping.length) {
                  sideEffectsRebuildersAtBootstrapping.forEach(function(rebuild) {
                    return rebuild();
                  });
                }
                mountingFreers = patchAtMounting(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter, speedySandBox);
                if (sideEffectsRebuildersAtMounting.length) {
                  sideEffectsRebuildersAtMounting.forEach(function(rebuild) {
                    return rebuild();
                  });
                }
                sideEffectsRebuilders = [];
              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    unmount: function unmount() {
      return _asyncToGenerator(import_regenerator3.default.mark(function _callee2() {
        return import_regenerator3.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                sideEffectsRebuilders = [].concat(_toConsumableArray(bootstrappingFreers), _toConsumableArray(mountingFreers)).map(function(free) {
                  return free();
                });
                sandbox.inactive();
              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    }
  };
}

// node_modules/qiankun/es/loader.js
var _excluded = ["singular", "sandbox", "excludeAssetFilter", "globalContext"];
function assertElementExist(element, msg) {
  if (!element) {
    if (msg) {
      throw new QiankunError(msg);
    }
    throw new QiankunError("element not existed!");
  }
}
function execHooksChain(hooks, app) {
  var global2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : window;
  if (hooks.length) {
    return hooks.reduce(function(chain, hook) {
      return chain.then(function() {
        return hook(app, global2);
      });
    }, Promise.resolve());
  }
  return Promise.resolve();
}
function validateSingularMode(_x, _x2) {
  return _validateSingularMode.apply(this, arguments);
}
function _validateSingularMode() {
  _validateSingularMode = _asyncToGenerator(import_regenerator4.default.mark(function _callee(validate, app) {
    return import_regenerator4.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", typeof validate === "function" ? validate(app) : !!validate);
          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _validateSingularMode.apply(this, arguments);
}
var supportShadowDOM = !!document.head.attachShadow || !!document.head.createShadowRoot;
function createElement(appContent, strictStyleIsolation, scopedCSS, appInstanceId) {
  var containerElement = document.createElement("div");
  containerElement.innerHTML = appContent;
  var appElement = containerElement.firstChild;
  if (strictStyleIsolation) {
    if (!supportShadowDOM) {
      console.warn("[qiankun]: As current browser not support shadow dom, your strictStyleIsolation configuration will be ignored!");
    } else {
      var innerHTML = appElement.innerHTML;
      appElement.innerHTML = "";
      var shadow;
      if (appElement.attachShadow) {
        shadow = appElement.attachShadow({
          mode: "open"
        });
      } else {
        shadow = appElement.createShadowRoot();
      }
      shadow.innerHTML = innerHTML;
    }
  }
  if (scopedCSS) {
    var attr = appElement.getAttribute(css_exports.QiankunCSSRewriteAttr);
    if (!attr) {
      appElement.setAttribute(css_exports.QiankunCSSRewriteAttr, appInstanceId);
    }
    var styleNodes = appElement.querySelectorAll("style") || [];
    (0, import_forEach.default)(styleNodes, function(stylesheetElement) {
      css_exports.process(appElement, stylesheetElement, appInstanceId);
    });
  }
  return appElement;
}
function getAppWrapperGetter(appInstanceId, useLegacyRender, strictStyleIsolation, scopedCSS, elementGetter) {
  return function() {
    if (useLegacyRender) {
      if (strictStyleIsolation)
        throw new QiankunError("strictStyleIsolation can not be used with legacy render!");
      if (scopedCSS)
        throw new QiankunError("experimentalStyleIsolation can not be used with legacy render!");
      var appWrapper = document.getElementById(getWrapperId(appInstanceId));
      assertElementExist(appWrapper, "Wrapper element for ".concat(appInstanceId, " is not existed!"));
      return appWrapper;
    }
    var element = elementGetter();
    assertElementExist(element, "Wrapper element for ".concat(appInstanceId, " is not existed!"));
    if (strictStyleIsolation && supportShadowDOM) {
      return element.shadowRoot;
    }
    return element;
  };
}
var rawAppendChild = HTMLElement.prototype.appendChild;
var rawRemoveChild2 = HTMLElement.prototype.removeChild;
function getRender(appInstanceId, appContent, legacyRender) {
  var render = function render2(_ref, phase) {
    var element = _ref.element, loading = _ref.loading, container = _ref.container;
    if (legacyRender) {
      if (true) {
        console.error("[qiankun] Custom rendering function is deprecated and will be removed in 3.0, you can use the container element setting instead!");
      }
      return legacyRender({
        loading,
        appContent: element ? appContent : ""
      });
    }
    var containerElement = getContainer(container);
    if (phase !== "unmounted") {
      var errorMsg = function() {
        switch (phase) {
          case "loading":
          case "mounting":
            return "Target container with ".concat(container, " not existed while ").concat(appInstanceId, " ").concat(phase, "!");
          case "mounted":
            return "Target container with ".concat(container, " not existed after ").concat(appInstanceId, " ").concat(phase, "!");
          default:
            return "Target container with ".concat(container, " not existed while ").concat(appInstanceId, " rendering!");
        }
      }();
      assertElementExist(containerElement, errorMsg);
    }
    if (containerElement && !containerElement.contains(element)) {
      while (containerElement.firstChild) {
        rawRemoveChild2.call(containerElement, containerElement.firstChild);
      }
      if (element) {
        rawAppendChild.call(containerElement, element);
      }
    }
    return void 0;
  };
  return render;
}
function getLifecyclesFromExports(scriptExports, appName, global2, globalLatestSetProp) {
  if (validateExportLifecycle(scriptExports)) {
    return scriptExports;
  }
  if (globalLatestSetProp) {
    var lifecycles = global2[globalLatestSetProp];
    if (validateExportLifecycle(lifecycles)) {
      return lifecycles;
    }
  }
  if (true) {
    console.warn("[qiankun] lifecycle not found from ".concat(appName, " entry exports, fallback to get from window['").concat(appName, "']"));
  }
  var globalVariableExports = global2[appName];
  if (validateExportLifecycle(globalVariableExports)) {
    return globalVariableExports;
  }
  throw new QiankunError("You need to export lifecycle functions in ".concat(appName, " entry"));
}
var prevAppUnmountedDeferred;
function loadApp(_x3) {
  return _loadApp.apply(this, arguments);
}
function _loadApp() {
  _loadApp = _asyncToGenerator(import_regenerator4.default.mark(function _callee17(app) {
    var _sandboxContainer, _sandboxContainer$ins;
    var configuration, lifeCycles, entry, appName, appInstanceId, markName, _configuration$singul, singular, _configuration$sandbo, sandbox, excludeAssetFilter, _configuration$global, globalContext, importEntryOpts, _yield$importEntry, template, execScripts, assetPublicPath, appContent, strictStyleIsolation, scopedCSS, initialAppWrapperElement, initialContainer, legacyRender, render, initialAppWrapperGetter, global2, mountSandbox, unmountSandbox, useLooseSandbox, speedySandbox, sandboxContainer, _mergeWith3, _mergeWith$beforeUnmo, beforeUnmount, _mergeWith$afterUnmou, afterUnmount, _mergeWith$afterMount, afterMount, _mergeWith$beforeMoun, beforeMount, _mergeWith$beforeLoad, beforeLoad, scriptExports, _getLifecyclesFromExp, bootstrap, mount, unmount, update, _getMicroAppStateActi, onGlobalStateChange, setGlobalState, offGlobalStateChange, syncAppWrapperElement2Sandbox, parcelConfigGetter, _args17 = arguments;
    return import_regenerator4.default.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            configuration = _args17.length > 1 && _args17[1] !== void 0 ? _args17[1] : {};
            lifeCycles = _args17.length > 2 ? _args17[2] : void 0;
            entry = app.entry, appName = app.name;
            appInstanceId = genAppInstanceIdByName(appName);
            markName = "[qiankun] App ".concat(appInstanceId, " Loading");
            if (true) {
              performanceMark(markName);
            }
            _configuration$singul = configuration.singular, singular = _configuration$singul === void 0 ? false : _configuration$singul, _configuration$sandbo = configuration.sandbox, sandbox = _configuration$sandbo === void 0 ? true : _configuration$sandbo, excludeAssetFilter = configuration.excludeAssetFilter, _configuration$global = configuration.globalContext, globalContext = _configuration$global === void 0 ? window : _configuration$global, importEntryOpts = _objectWithoutProperties(configuration, _excluded);
            _context17.next = 9;
            return importEntry(entry, importEntryOpts);
          case 9:
            _yield$importEntry = _context17.sent;
            template = _yield$importEntry.template;
            execScripts = _yield$importEntry.execScripts;
            assetPublicPath = _yield$importEntry.assetPublicPath;
            _context17.next = 15;
            return validateSingularMode(singular, app);
          case 15:
            if (!_context17.sent) {
              _context17.next = 18;
              break;
            }
            _context17.next = 18;
            return prevAppUnmountedDeferred && prevAppUnmountedDeferred.promise;
          case 18:
            appContent = getDefaultTplWrapper(appInstanceId)(template);
            strictStyleIsolation = _typeof(sandbox) === "object" && !!sandbox.strictStyleIsolation;
            if (strictStyleIsolation) {
              console.warn("[qiankun] strictStyleIsolation configuration will be removed in 3.0, pls don't depend on it or use experimentalStyleIsolation instead!");
            }
            scopedCSS = isEnableScopedCSS(sandbox);
            initialAppWrapperElement = createElement(appContent, strictStyleIsolation, scopedCSS, appInstanceId);
            initialContainer = "container" in app ? app.container : void 0;
            legacyRender = "render" in app ? app.render : void 0;
            render = getRender(appInstanceId, appContent, legacyRender);
            render({
              element: initialAppWrapperElement,
              loading: true,
              container: initialContainer
            }, "loading");
            initialAppWrapperGetter = getAppWrapperGetter(appInstanceId, !!legacyRender, strictStyleIsolation, scopedCSS, function() {
              return initialAppWrapperElement;
            });
            global2 = globalContext;
            mountSandbox = function mountSandbox2() {
              return Promise.resolve();
            };
            unmountSandbox = function unmountSandbox2() {
              return Promise.resolve();
            };
            useLooseSandbox = _typeof(sandbox) === "object" && !!sandbox.loose;
            speedySandbox = _typeof(sandbox) === "object" && !!sandbox.speedy;
            if (sandbox) {
              sandboxContainer = createSandboxContainer(appInstanceId, initialAppWrapperGetter, scopedCSS, useLooseSandbox, excludeAssetFilter, global2, speedySandbox);
              global2 = sandboxContainer.instance.proxy;
              mountSandbox = sandboxContainer.mount;
              unmountSandbox = sandboxContainer.unmount;
            }
            _mergeWith3 = (0, import_mergeWith2.default)({}, getAddOns(global2, assetPublicPath), lifeCycles, function(v1, v2) {
              return (0, import_concat2.default)(v1 !== null && v1 !== void 0 ? v1 : [], v2 !== null && v2 !== void 0 ? v2 : []);
            }), _mergeWith$beforeUnmo = _mergeWith3.beforeUnmount, beforeUnmount = _mergeWith$beforeUnmo === void 0 ? [] : _mergeWith$beforeUnmo, _mergeWith$afterUnmou = _mergeWith3.afterUnmount, afterUnmount = _mergeWith$afterUnmou === void 0 ? [] : _mergeWith$afterUnmou, _mergeWith$afterMount = _mergeWith3.afterMount, afterMount = _mergeWith$afterMount === void 0 ? [] : _mergeWith$afterMount, _mergeWith$beforeMoun = _mergeWith3.beforeMount, beforeMount = _mergeWith$beforeMoun === void 0 ? [] : _mergeWith$beforeMoun, _mergeWith$beforeLoad = _mergeWith3.beforeLoad, beforeLoad = _mergeWith$beforeLoad === void 0 ? [] : _mergeWith$beforeLoad;
            _context17.next = 37;
            return execHooksChain(toArray(beforeLoad), app, global2);
          case 37:
            _context17.next = 39;
            return execScripts(global2, sandbox && !useLooseSandbox, {
              scopedGlobalVariables: speedySandbox ? trustedGlobals : []
            });
          case 39:
            scriptExports = _context17.sent;
            _getLifecyclesFromExp = getLifecyclesFromExports(scriptExports, appName, global2, (_sandboxContainer = sandboxContainer) === null || _sandboxContainer === void 0 ? void 0 : (_sandboxContainer$ins = _sandboxContainer.instance) === null || _sandboxContainer$ins === void 0 ? void 0 : _sandboxContainer$ins.latestSetProp), bootstrap = _getLifecyclesFromExp.bootstrap, mount = _getLifecyclesFromExp.mount, unmount = _getLifecyclesFromExp.unmount, update = _getLifecyclesFromExp.update;
            _getMicroAppStateActi = getMicroAppStateActions(appInstanceId), onGlobalStateChange = _getMicroAppStateActi.onGlobalStateChange, setGlobalState = _getMicroAppStateActi.setGlobalState, offGlobalStateChange = _getMicroAppStateActi.offGlobalStateChange;
            syncAppWrapperElement2Sandbox = function syncAppWrapperElement2Sandbox2(element) {
              return initialAppWrapperElement = element;
            };
            parcelConfigGetter = function parcelConfigGetter2() {
              var remountContainer = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : initialContainer;
              var appWrapperElement;
              var appWrapperGetter;
              var parcelConfig = {
                name: appInstanceId,
                bootstrap,
                mount: [
                  _asyncToGenerator(import_regenerator4.default.mark(function _callee2() {
                    var marks;
                    return import_regenerator4.default.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            if (true) {
                              marks = performanceGetEntriesByName(markName, "mark");
                              if (marks && !marks.length) {
                                performanceMark(markName);
                              }
                            }
                          case 1:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  })),
                  _asyncToGenerator(import_regenerator4.default.mark(function _callee3() {
                    return import_regenerator4.default.wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            _context3.next = 2;
                            return validateSingularMode(singular, app);
                          case 2:
                            _context3.t0 = _context3.sent;
                            if (!_context3.t0) {
                              _context3.next = 5;
                              break;
                            }
                            _context3.t0 = prevAppUnmountedDeferred;
                          case 5:
                            if (!_context3.t0) {
                              _context3.next = 7;
                              break;
                            }
                            return _context3.abrupt("return", prevAppUnmountedDeferred.promise);
                          case 7:
                            return _context3.abrupt("return", void 0);
                          case 8:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3);
                  })),
                  _asyncToGenerator(import_regenerator4.default.mark(function _callee4() {
                    return import_regenerator4.default.wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            appWrapperElement = initialAppWrapperElement;
                            appWrapperGetter = getAppWrapperGetter(appInstanceId, !!legacyRender, strictStyleIsolation, scopedCSS, function() {
                              return appWrapperElement;
                            });
                          case 2:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _callee4);
                  })),
                  _asyncToGenerator(import_regenerator4.default.mark(function _callee5() {
                    var useNewContainer;
                    return import_regenerator4.default.wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            useNewContainer = remountContainer !== initialContainer;
                            if (useNewContainer || !appWrapperElement) {
                              appWrapperElement = createElement(appContent, strictStyleIsolation, scopedCSS, appInstanceId);
                              syncAppWrapperElement2Sandbox(appWrapperElement);
                            }
                            render({
                              element: appWrapperElement,
                              loading: true,
                              container: remountContainer
                            }, "mounting");
                          case 3:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5);
                  })),
                  mountSandbox,
                  _asyncToGenerator(import_regenerator4.default.mark(function _callee6() {
                    return import_regenerator4.default.wrap(function _callee6$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            return _context6.abrupt("return", execHooksChain(toArray(beforeMount), app, global2));
                          case 1:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, _callee6);
                  })),
                  function() {
                    var _ref7 = _asyncToGenerator(import_regenerator4.default.mark(function _callee7(props) {
                      return import_regenerator4.default.wrap(function _callee7$(_context7) {
                        while (1) {
                          switch (_context7.prev = _context7.next) {
                            case 0:
                              return _context7.abrupt("return", mount(_objectSpread2(_objectSpread2({}, props), {}, {
                                container: appWrapperGetter(),
                                setGlobalState,
                                onGlobalStateChange
                              })));
                            case 1:
                            case "end":
                              return _context7.stop();
                          }
                        }
                      }, _callee7);
                    }));
                    return function(_x4) {
                      return _ref7.apply(this, arguments);
                    };
                  }(),
                  _asyncToGenerator(import_regenerator4.default.mark(function _callee8() {
                    return import_regenerator4.default.wrap(function _callee8$(_context8) {
                      while (1) {
                        switch (_context8.prev = _context8.next) {
                          case 0:
                            return _context8.abrupt("return", render({
                              element: appWrapperElement,
                              loading: false,
                              container: remountContainer
                            }, "mounted"));
                          case 1:
                          case "end":
                            return _context8.stop();
                        }
                      }
                    }, _callee8);
                  })),
                  _asyncToGenerator(import_regenerator4.default.mark(function _callee9() {
                    return import_regenerator4.default.wrap(function _callee9$(_context9) {
                      while (1) {
                        switch (_context9.prev = _context9.next) {
                          case 0:
                            return _context9.abrupt("return", execHooksChain(toArray(afterMount), app, global2));
                          case 1:
                          case "end":
                            return _context9.stop();
                        }
                      }
                    }, _callee9);
                  })),
                  _asyncToGenerator(import_regenerator4.default.mark(function _callee10() {
                    return import_regenerator4.default.wrap(function _callee10$(_context10) {
                      while (1) {
                        switch (_context10.prev = _context10.next) {
                          case 0:
                            _context10.next = 2;
                            return validateSingularMode(singular, app);
                          case 2:
                            if (!_context10.sent) {
                              _context10.next = 4;
                              break;
                            }
                            prevAppUnmountedDeferred = new Deferred();
                          case 4:
                          case "end":
                            return _context10.stop();
                        }
                      }
                    }, _callee10);
                  })),
                  _asyncToGenerator(import_regenerator4.default.mark(function _callee11() {
                    var measureName;
                    return import_regenerator4.default.wrap(function _callee11$(_context11) {
                      while (1) {
                        switch (_context11.prev = _context11.next) {
                          case 0:
                            if (true) {
                              measureName = "[qiankun] App ".concat(appInstanceId, " Loading Consuming");
                              performanceMeasure(measureName, markName);
                            }
                          case 1:
                          case "end":
                            return _context11.stop();
                        }
                      }
                    }, _callee11);
                  }))
                ],
                unmount: [_asyncToGenerator(import_regenerator4.default.mark(function _callee12() {
                  return import_regenerator4.default.wrap(function _callee12$(_context12) {
                    while (1) {
                      switch (_context12.prev = _context12.next) {
                        case 0:
                          return _context12.abrupt("return", execHooksChain(toArray(beforeUnmount), app, global2));
                        case 1:
                        case "end":
                          return _context12.stop();
                      }
                    }
                  }, _callee12);
                })), function() {
                  var _ref13 = _asyncToGenerator(import_regenerator4.default.mark(function _callee13(props) {
                    return import_regenerator4.default.wrap(function _callee13$(_context13) {
                      while (1) {
                        switch (_context13.prev = _context13.next) {
                          case 0:
                            return _context13.abrupt("return", unmount(_objectSpread2(_objectSpread2({}, props), {}, {
                              container: appWrapperGetter()
                            })));
                          case 1:
                          case "end":
                            return _context13.stop();
                        }
                      }
                    }, _callee13);
                  }));
                  return function(_x5) {
                    return _ref13.apply(this, arguments);
                  };
                }(), unmountSandbox, _asyncToGenerator(import_regenerator4.default.mark(function _callee14() {
                  return import_regenerator4.default.wrap(function _callee14$(_context14) {
                    while (1) {
                      switch (_context14.prev = _context14.next) {
                        case 0:
                          return _context14.abrupt("return", execHooksChain(toArray(afterUnmount), app, global2));
                        case 1:
                        case "end":
                          return _context14.stop();
                      }
                    }
                  }, _callee14);
                })), _asyncToGenerator(import_regenerator4.default.mark(function _callee15() {
                  return import_regenerator4.default.wrap(function _callee15$(_context15) {
                    while (1) {
                      switch (_context15.prev = _context15.next) {
                        case 0:
                          render({
                            element: null,
                            loading: false,
                            container: remountContainer
                          }, "unmounted");
                          offGlobalStateChange(appInstanceId);
                          appWrapperElement = null;
                          syncAppWrapperElement2Sandbox(appWrapperElement);
                        case 4:
                        case "end":
                          return _context15.stop();
                      }
                    }
                  }, _callee15);
                })), _asyncToGenerator(import_regenerator4.default.mark(function _callee16() {
                  return import_regenerator4.default.wrap(function _callee16$(_context16) {
                    while (1) {
                      switch (_context16.prev = _context16.next) {
                        case 0:
                          _context16.next = 2;
                          return validateSingularMode(singular, app);
                        case 2:
                          _context16.t0 = _context16.sent;
                          if (!_context16.t0) {
                            _context16.next = 5;
                            break;
                          }
                          _context16.t0 = prevAppUnmountedDeferred;
                        case 5:
                          if (!_context16.t0) {
                            _context16.next = 7;
                            break;
                          }
                          prevAppUnmountedDeferred.resolve();
                        case 7:
                        case "end":
                          return _context16.stop();
                      }
                    }
                  }, _callee16);
                }))]
              };
              if (typeof update === "function") {
                parcelConfig.update = update;
              }
              return parcelConfig;
            };
            return _context17.abrupt("return", parcelConfigGetter);
          case 45:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  return _loadApp.apply(this, arguments);
}

// node_modules/qiankun/es/prefetch.js
var import_isFunction4 = __toESM(require_isFunction());
var import_regenerator5 = __toESM(require_regenerator());
var requestIdleCallback3 = window.requestIdleCallback || function requestIdleCallback4(cb) {
  var start2 = Date.now();
  return setTimeout(function() {
    cb({
      didTimeout: false,
      timeRemaining: function timeRemaining() {
        return Math.max(0, 50 - (Date.now() - start2));
      }
    });
  }, 1);
};
var isSlowNetwork = navigator.connection ? navigator.connection.saveData || navigator.connection.type !== "wifi" && navigator.connection.type !== "ethernet" && /([23])g/.test(navigator.connection.effectiveType) : false;
function prefetch(entry, opts) {
  if (!navigator.onLine || isSlowNetwork) {
    return;
  }
  requestIdleCallback3(_asyncToGenerator(import_regenerator5.default.mark(function _callee() {
    var _yield$importEntry, getExternalScripts, getExternalStyleSheets;
    return import_regenerator5.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return importEntry(entry, opts);
          case 2:
            _yield$importEntry = _context.sent;
            getExternalScripts = _yield$importEntry.getExternalScripts;
            getExternalStyleSheets = _yield$importEntry.getExternalStyleSheets;
            requestIdleCallback3(getExternalStyleSheets);
            requestIdleCallback3(getExternalScripts);
          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
}
function prefetchAfterFirstMounted(apps, opts) {
  window.addEventListener("single-spa:first-mount", function listener() {
    var notLoadedApps = apps.filter(function(app) {
      return Pt(app.name) === l;
    });
    if (true) {
      var mountedApps = Et();
      console.log("[qiankun] prefetch starting after ".concat(mountedApps, " mounted..."), notLoadedApps);
    }
    notLoadedApps.forEach(function(_ref2) {
      var entry = _ref2.entry;
      return prefetch(entry, opts);
    });
    window.removeEventListener("single-spa:first-mount", listener);
  });
}
function prefetchImmediately(apps, opts) {
  if (true) {
    console.log("[qiankun] prefetch starting for apps...", apps);
  }
  apps.forEach(function(_ref3) {
    var entry = _ref3.entry;
    return prefetch(entry, opts);
  });
}
function doPrefetchStrategy(apps, prefetchStrategy, importEntryOpts) {
  var appsName2Apps = function appsName2Apps2(names) {
    return apps.filter(function(app) {
      return names.includes(app.name);
    });
  };
  if (Array.isArray(prefetchStrategy)) {
    prefetchAfterFirstMounted(appsName2Apps(prefetchStrategy), importEntryOpts);
  } else if ((0, import_isFunction4.default)(prefetchStrategy)) {
    _asyncToGenerator(import_regenerator5.default.mark(function _callee2() {
      var _yield$prefetchStrate, _yield$prefetchStrate2, criticalAppNames, _yield$prefetchStrate3, minorAppsName;
      return import_regenerator5.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return prefetchStrategy(apps);
            case 2:
              _yield$prefetchStrate = _context2.sent;
              _yield$prefetchStrate2 = _yield$prefetchStrate.criticalAppNames;
              criticalAppNames = _yield$prefetchStrate2 === void 0 ? [] : _yield$prefetchStrate2;
              _yield$prefetchStrate3 = _yield$prefetchStrate.minorAppsName;
              minorAppsName = _yield$prefetchStrate3 === void 0 ? [] : _yield$prefetchStrate3;
              prefetchImmediately(appsName2Apps(criticalAppNames), importEntryOpts);
              prefetchAfterFirstMounted(appsName2Apps(minorAppsName), importEntryOpts);
            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  } else {
    switch (prefetchStrategy) {
      case true:
        prefetchAfterFirstMounted(apps, importEntryOpts);
        break;
      case "all":
        prefetchImmediately(apps, importEntryOpts);
        break;
      default:
        break;
    }
  }
}

// node_modules/qiankun/es/apis.js
var _excluded2 = ["name", "activeRule", "loader", "props"];
var _excluded22 = ["mount"];
var _excluded3 = ["prefetch", "sandbox", "singular", "urlRerouteOnly"];
var microApps = [];
var frameworkConfiguration = {};
var started = false;
var defaultUrlRerouteOnly = true;
var frameworkStartedDefer = new Deferred();
var autoDowngradeForLowVersionBrowser = function autoDowngradeForLowVersionBrowser2(configuration) {
  var sandbox = configuration.sandbox, singular = configuration.singular;
  if (sandbox) {
    if (!window.Proxy) {
      console.warn("[qiankun] Miss window.Proxy, proxySandbox will degenerate into snapshotSandbox");
      if (singular === false) {
        console.warn("[qiankun] Setting singular as false may cause unexpected behavior while your browser not support window.Proxy");
      }
      return _objectSpread2(_objectSpread2({}, configuration), {}, {
        sandbox: _typeof(sandbox) === "object" ? _objectSpread2(_objectSpread2({}, sandbox), {}, {
          loose: true
        }) : {
          loose: true
        }
      });
    }
  }
  return configuration;
};
function registerMicroApps(apps, lifeCycles) {
  var unregisteredApps = apps.filter(function(app) {
    return !microApps.some(function(registeredApp) {
      return registeredApp.name === app.name;
    });
  });
  microApps = [].concat(_toConsumableArray(microApps), _toConsumableArray(unregisteredApps));
  unregisteredApps.forEach(function(app) {
    var name2 = app.name, activeRule = app.activeRule, _app$loader = app.loader, loader = _app$loader === void 0 ? import_noop4.default : _app$loader, props = app.props, appConfig = _objectWithoutProperties(app, _excluded2);
    Ot({
      name: name2,
      app: function() {
        var _app = _asyncToGenerator(import_regenerator6.default.mark(function _callee3() {
          var _yield$loadApp, mount, otherMicroAppConfigs;
          return import_regenerator6.default.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  loader(true);
                  _context3.next = 3;
                  return frameworkStartedDefer.promise;
                case 3:
                  _context3.next = 5;
                  return loadApp(_objectSpread2({
                    name: name2,
                    props
                  }, appConfig), frameworkConfiguration, lifeCycles);
                case 5:
                  _context3.t0 = _context3.sent;
                  _yield$loadApp = (0, _context3.t0)();
                  mount = _yield$loadApp.mount;
                  otherMicroAppConfigs = _objectWithoutProperties(_yield$loadApp, _excluded22);
                  return _context3.abrupt("return", _objectSpread2({
                    mount: [_asyncToGenerator(import_regenerator6.default.mark(function _callee() {
                      return import_regenerator6.default.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              return _context.abrupt("return", loader(true));
                            case 1:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }))].concat(_toConsumableArray(toArray(mount)), [_asyncToGenerator(import_regenerator6.default.mark(function _callee2() {
                      return import_regenerator6.default.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              return _context2.abrupt("return", loader(false));
                            case 1:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    }))])
                  }, otherMicroAppConfigs));
                case 10:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));
        function app2() {
          return _app.apply(this, arguments);
        }
        return app2;
      }(),
      activeWhen: activeRule,
      customProps: props
    });
  });
}
var appConfigPromiseGetterMap = /* @__PURE__ */ new Map();
var containerMicroAppsMap = /* @__PURE__ */ new Map();
function loadMicroApp(app, configuration, lifeCycles) {
  var props = app.props, name2 = app.name;
  var container = "container" in app ? app.container : void 0;
  var containerXPath = getContainerXPath(container);
  var appContainerXPathKey = "".concat(name2, "-").concat(containerXPath);
  var microApp;
  var wrapParcelConfigForRemount = function wrapParcelConfigForRemount2(config) {
    var microAppConfig = config;
    if (container) {
      if (containerXPath) {
        var containerMicroApps = containerMicroAppsMap.get(appContainerXPathKey);
        if (containerMicroApps === null || containerMicroApps === void 0 ? void 0 : containerMicroApps.length) {
          var mount = [_asyncToGenerator(import_regenerator6.default.mark(function _callee4() {
            var prevLoadMicroApps, prevLoadMicroAppsWhichNotBroken;
            return import_regenerator6.default.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    prevLoadMicroApps = containerMicroApps.slice(0, containerMicroApps.indexOf(microApp));
                    prevLoadMicroAppsWhichNotBroken = prevLoadMicroApps.filter(function(v2) {
                      return v2.getStatus() !== "LOAD_ERROR" && v2.getStatus() !== "SKIP_BECAUSE_BROKEN";
                    });
                    _context4.next = 4;
                    return Promise.all(prevLoadMicroAppsWhichNotBroken.map(function(v2) {
                      return v2.unmountPromise;
                    }));
                  case 4:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }))].concat(_toConsumableArray(toArray(microAppConfig.mount)));
          microAppConfig = _objectSpread2(_objectSpread2({}, config), {}, {
            mount
          });
        }
      }
    }
    return _objectSpread2(_objectSpread2({}, microAppConfig), {}, {
      bootstrap: function bootstrap() {
        return Promise.resolve();
      }
    });
  };
  var memorizedLoadingFn = function() {
    var _ref4 = _asyncToGenerator(import_regenerator6.default.mark(function _callee5() {
      var userConfiguration, $$cacheLifecycleByAppName, parcelConfigGetterPromise, _parcelConfigGetterPromise, parcelConfigObjectGetterPromise;
      return import_regenerator6.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              userConfiguration = autoDowngradeForLowVersionBrowser(configuration !== null && configuration !== void 0 ? configuration : _objectSpread2(_objectSpread2({}, frameworkConfiguration), {}, {
                singular: false
              }));
              $$cacheLifecycleByAppName = userConfiguration.$$cacheLifecycleByAppName;
              if (!container) {
                _context5.next = 21;
                break;
              }
              if (!$$cacheLifecycleByAppName) {
                _context5.next = 12;
                break;
              }
              parcelConfigGetterPromise = appConfigPromiseGetterMap.get(name2);
              if (!parcelConfigGetterPromise) {
                _context5.next = 12;
                break;
              }
              _context5.t0 = wrapParcelConfigForRemount;
              _context5.next = 9;
              return parcelConfigGetterPromise;
            case 9:
              _context5.t1 = _context5.sent;
              _context5.t2 = (0, _context5.t1)(container);
              return _context5.abrupt("return", (0, _context5.t0)(_context5.t2));
            case 12:
              if (!containerXPath) {
                _context5.next = 21;
                break;
              }
              _parcelConfigGetterPromise = appConfigPromiseGetterMap.get(appContainerXPathKey);
              if (!_parcelConfigGetterPromise) {
                _context5.next = 21;
                break;
              }
              _context5.t3 = wrapParcelConfigForRemount;
              _context5.next = 18;
              return _parcelConfigGetterPromise;
            case 18:
              _context5.t4 = _context5.sent;
              _context5.t5 = (0, _context5.t4)(container);
              return _context5.abrupt("return", (0, _context5.t3)(_context5.t5));
            case 21:
              parcelConfigObjectGetterPromise = loadApp(app, userConfiguration, lifeCycles);
              if (container) {
                if ($$cacheLifecycleByAppName) {
                  appConfigPromiseGetterMap.set(name2, parcelConfigObjectGetterPromise);
                } else if (containerXPath)
                  appConfigPromiseGetterMap.set(appContainerXPathKey, parcelConfigObjectGetterPromise);
              }
              _context5.next = 25;
              return parcelConfigObjectGetterPromise;
            case 25:
              _context5.t6 = _context5.sent;
              return _context5.abrupt("return", (0, _context5.t6)(container));
            case 27:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));
    return function memorizedLoadingFn2() {
      return _ref4.apply(this, arguments);
    };
  }();
  if (!started && (configuration === null || configuration === void 0 ? void 0 : configuration.autoStart) !== false) {
    var _frameworkConfigurati;
    xt({
      urlRerouteOnly: (_frameworkConfigurati = frameworkConfiguration.urlRerouteOnly) !== null && _frameworkConfigurati !== void 0 ? _frameworkConfigurati : defaultUrlRerouteOnly
    });
  }
  microApp = C(memorizedLoadingFn, _objectSpread2({
    domElement: document.createElement("div")
  }, props));
  if (container) {
    if (containerXPath) {
      var microAppsRef = containerMicroAppsMap.get(appContainerXPathKey) || [];
      microAppsRef.push(microApp);
      containerMicroAppsMap.set(appContainerXPathKey, microAppsRef);
      var cleanup = function cleanup2() {
        var index = microAppsRef.indexOf(microApp);
        microAppsRef.splice(index, 1);
        microApp = null;
      };
      microApp.unmountPromise.then(cleanup).catch(cleanup);
    }
  }
  return microApp;
}
function start() {
  var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  frameworkConfiguration = _objectSpread2({
    prefetch: true,
    singular: true,
    sandbox: true
  }, opts);
  var _frameworkConfigurati2 = frameworkConfiguration, prefetch2 = _frameworkConfigurati2.prefetch, sandbox = _frameworkConfigurati2.sandbox, singular = _frameworkConfigurati2.singular, _frameworkConfigurati3 = _frameworkConfigurati2.urlRerouteOnly, urlRerouteOnly = _frameworkConfigurati3 === void 0 ? defaultUrlRerouteOnly : _frameworkConfigurati3, importEntryOpts = _objectWithoutProperties(_frameworkConfigurati2, _excluded3);
  if (prefetch2) {
    doPrefetchStrategy(microApps, prefetch2, importEntryOpts);
  }
  frameworkConfiguration = autoDowngradeForLowVersionBrowser(frameworkConfiguration);
  xt({
    urlRerouteOnly
  });
  started = true;
  frameworkStartedDefer.resolve();
}

// node_modules/qiankun/es/errorHandler.js
function addGlobalUncaughtErrorHandler(errorHandler) {
  window.addEventListener("error", errorHandler);
  window.addEventListener("unhandledrejection", errorHandler);
}
function removeGlobalUncaughtErrorHandler(errorHandler) {
  window.removeEventListener("error", errorHandler);
  window.removeEventListener("unhandledrejection", errorHandler);
}

// node_modules/qiankun/es/effects.js
var firstMountLogLabel = "[qiankun] first app mounted";
if (true) {
  console.time(firstMountLogLabel);
}
function setDefaultMountApp(defaultAppLink) {
  window.addEventListener("single-spa:no-app-change", function listener() {
    var mountedApps = Et();
    if (!mountedApps.length) {
      nt(defaultAppLink);
    }
    window.removeEventListener("single-spa:no-app-change", listener);
  });
}
function runDefaultMountEffects(defaultAppLink) {
  console.warn("[qiankun] runDefaultMountEffects will be removed in next version, please use setDefaultMountApp instead");
  setDefaultMountApp(defaultAppLink);
}
function runAfterFirstMounted(effect) {
  window.addEventListener("single-spa:first-mount", function listener() {
    if (true) {
      console.timeEnd(firstMountLogLabel);
    }
    effect();
    window.removeEventListener("single-spa:first-mount", listener);
  });
}
export {
  SandBoxType,
  getCurrentRunningApp as __internalGetCurrentRunningApp,
  a as addErrorHandler,
  addGlobalUncaughtErrorHandler,
  initGlobalState,
  loadMicroApp,
  prefetchImmediately as prefetchApps,
  registerMicroApps,
  c as removeErrorHandler,
  removeGlobalUncaughtErrorHandler,
  runAfterFirstMounted,
  runDefaultMountEffects,
  setDefaultMountApp,
  start
};
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
//# sourceMappingURL=qiankun.js.map
